const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
require('dotenv').config();

// Import all models
const User = require('./models/User');
const Role = require('./models/Role');
const RoleUser = require('./models/RoleUser');
const ProductCategory = require('./models/ProductCategory');
const Product = require('./models/Product');
const Category = require('./models/Category');
const Service = require('./models/Service');
const NewsEvent = require('./models/NewsEvent');
const DeviceRental = require('./models/OrderTestDrive');

// Sample data
const sampleRoles = [
  {
    Role_Name: 'admin',
    Role_Description: 'Qu·∫£n tr·ªã vi√™n h·ªá th·ªëng',
    Permissions: [
      'read:products', 'write:products',
      'read:categories', 'write:categories',
      'read:users', 'write:users',
      'read:orders', 'write:orders',
      'read:roles', 'write:roles'
    ],
    Status: 'active'
  },
  {
    Role_Name: 'user',
    Role_Description: 'Ng∆∞·ªùi d√πng th√¥ng th∆∞·ªùng',
    Permissions: ['read:products', 'read:categories'],
    Status: 'active'
  }
];

// Group Categories (C·∫•p cha)
const sampleGroupCategories = [
  {
    Name: 'Laptop & M√°y T√≠nh X√°ch Tay',
    Description: 'C√°c lo·∫°i laptop v√† m√°y t√≠nh x√°ch tay',
    Icon: 'üíª',
    Image: 'https://images.unsplash.com/photo-1496181133206-80ce9b88a853?w=800&h=600&fit=crop',
    Status: 'active',
    Order: 1
  },
  {
    Name: 'M√°y T√≠nh ƒê·ªÉ B√†n',
    Description: 'PC gaming, vƒÉn ph√≤ng, ƒë·ªì h·ªça',
    Icon: 'üñ•Ô∏è',
    Image: 'https://images.unsplash.com/photo-1593640408182-31c70c8268f5?w=800&h=600&fit=crop',
    Status: 'active',
    Order: 2
  },
  {
    Name: 'Ph·ª• Ki·ªán M√°y T√≠nh',
    Description: 'B√†n ph√≠m, chu·ªôt, tai nghe, loa',
    Icon: '‚å®Ô∏è',
    Image: 'https://images.unsplash.com/photo-1527864550417-7fd91fc51a46?w=800&h=600&fit=crop',
    Status: 'active',
    Order: 3
  },
  {
    Name: 'Thi·∫øt B·ªã Ngo·∫°i Vi',
    Description: 'M√°y in, m√°y scan, m√†n h√¨nh, m√°y chi·∫øu',
    Icon: 'üñ®Ô∏è',
    Image: 'https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=800&h=600&fit=crop',
    Status: 'active',
    Order: 4
  },
  {
    Name: 'Thi·∫øt B·ªã M·∫°ng',
    Description: 'Router, switch, modem, access point',
    Icon: 'üåê',
    Image: 'https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=800&h=600&fit=crop',
    Status: 'active',
    Order: 5
  },
  {
    Name: 'L∆∞u Tr·ªØ & Backup',
    Description: '·ªî c·ª©ng, USB, th·∫ª nh·ªõ, NAS',
    Icon: 'üíæ',
    Image: 'https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=800&h=600&fit=crop',
    Status: 'active',
    Order: 6
  },
  {
    Name: 'Ph·∫ßn M·ªÅm & B·∫£n Quy·ªÅn',
    Description: 'Windows, Office, antivirus, design software',
    Icon: 'üõ°Ô∏è',
    Image: 'https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=800&h=600&fit=crop',
    Status: 'active',
    Order: 7
  },
  {
    Name: 'D·ªãch V·ª• C√¥ng Ngh·ªá',
    Description: 'S·ª≠a ch·ªØa, b·∫£o h√†nh, n√¢ng c·∫•p, t∆∞ v·∫•n',
    Icon: 'üîß',
    Image: 'https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=800&h=600&fit=crop',
    Status: 'active',
    Order: 8
  }
];

// Sample users data
const sampleUsers = [
  {
    UserName: 'user1',
    Password: 'password123',
    Email: 'user1@example.com',
    Phone: '0123456781',
    FullName: 'Nguy·ªÖn VƒÉn An',
    Address: 'H√† N·ªôi, Vi·ªát Nam',
    Role: 'user',
    Status: 'active'
  },
  {
    UserName: 'user2',
    Password: 'password123',
    Email: 'user2@example.com',
    Phone: '0123456782',
    FullName: 'Tr·∫ßn Th·ªã B√¨nh',
    Address: 'TP.HCM, Vi·ªát Nam',
    Role: 'user',
    Status: 'active'
  },
  {
    UserName: 'user3',
    Password: 'password123',
    Email: 'user3@example.com',
    Phone: '0123456783',
    FullName: 'L√™ VƒÉn C∆∞·ªùng',
    Address: 'ƒê√† N·∫µng, Vi·ªát Nam',
    Role: 'user',
    Status: 'active'
  },
  {
    UserName: 'user4',
    Password: 'password123',
    Email: 'user4@example.com',
    Phone: '0123456784',
    FullName: 'Ph·∫°m Th·ªã Dung',
    Address: 'H·∫£i Ph√≤ng, Vi·ªát Nam',
    Role: 'user',
    Status: 'active'
  },
  {
    UserName: 'user5',
    Password: 'password123',
    Email: 'user5@example.com',
    Phone: '0123456785',
    FullName: 'Ho√†ng VƒÉn Em',
    Address: 'C·∫ßn Th∆°, Vi·ªát Nam',
    Role: 'user',
    Status: 'active'
  },
  {
    UserName: 'user6',
    Password: 'password123',
    Email: 'user6@example.com',
    Phone: '0123456786',
    FullName: 'V≈© Th·ªã Ph∆∞∆°ng',
    Address: 'Nha Trang, Vi·ªát Nam',
    Role: 'user',
    Status: 'active'
  },
  {
    UserName: 'user7',
    Password: 'password123',
    Email: 'user7@example.com',
    Phone: '0123456787',
    FullName: 'ƒê·ªó VƒÉn Giang',
    Address: 'Hu·∫ø, Vi·ªát Nam',
    Role: 'user',
    Status: 'active'
  },
  {
    UserName: 'user8',
    Password: 'password123',
    Email: 'user8@example.com',
    Phone: '0123456788',
    FullName: 'Ng√¥ Th·ªã Hoa',
    Address: 'V≈©ng T√†u, Vi·ªát Nam',
    Role: 'user',
    Status: 'active'
  },
  {
    UserName: 'user9',
    Password: 'password123',
    Email: 'user9@example.com',
    Phone: '0123456789',
    FullName: 'L√Ω VƒÉn Inh',
    Address: 'B√¨nh D∆∞∆°ng, Vi·ªát Nam',
    Role: 'user',
    Status: 'active'
  },
  {
    UserName: 'user10',
    Password: 'password123',
    Email: 'user10@example.com',
    Phone: '0123456790',
    FullName: 'Tr·ªãnh Th·ªã Kim',
    Address: 'ƒê·ªìng Nai, Vi·ªát Nam',
    Role: 'user',
    Status: 'active'
  }
];

// Sample products data with diverse images
function generateSampleProducts() {
  const products = [];
  const deviceNames = [
    'Laptop Dell Inspiron 15 3000',
    'Laptop HP Pavilion 14',
    'Laptop Lenovo ThinkPad E14',
    'Laptop Asus VivoBook 15',
    'Laptop Acer Aspire 5',
    'MacBook Air M1',
    'MacBook Pro M2',
    'Laptop MSI Gaming GF63',
    'Laptop Razer Blade 15',
    'PC Gaming Dell Alienware',
    'PC HP Pavilion Desktop',
    'PC Lenovo ThinkCentre',
    'PC Asus ROG Strix',
    'PC Acer Aspire TC',
    'PC Mini Intel NUC',
    'PC All-in-One Dell',
    'B√†n Ph√≠m C∆° Logitech G Pro',
    'Chu·ªôt Gaming Razer DeathAdder',
    'Tai Nghe Gaming HyperX Cloud',
    'Loa M√°y T√≠nh Creative Pebble'
  ];

  const descriptions = [
    'Laptop Dell Inspiron 15 3000 - Laptop vƒÉn ph√≤ng hi·ªáu su·∫•t cao, m√†n h√¨nh 15.6 inch, Intel Core i5, RAM 8GB, SSD 256GB',
    'Laptop HP Pavilion 14 - Laptop m·ªèng nh·∫π, thi·∫øt k·∫ø hi·ªán ƒë·∫°i, m√†n h√¨nh 14 inch, AMD Ryzen 5, RAM 8GB, SSD 512GB',
    'Laptop Lenovo ThinkPad E14 - Laptop doanh nghi·ªáp b·ªÅn b·ªâ, m√†n h√¨nh 14 inch, Intel Core i7, RAM 16GB, SSD 512GB',
    'Laptop Asus VivoBook 15 - Laptop ƒëa nhi·ªám, m√†n h√¨nh 15.6 inch, Intel Core i5, RAM 8GB, HDD 1TB',
    'Laptop Acer Aspire 5 - Laptop gi√° r·∫ª hi·ªáu su·∫•t t·ªët, m√†n h√¨nh 15.6 inch, AMD Ryzen 3, RAM 4GB, HDD 500GB',
    'MacBook Air M1 - Laptop Apple cao c·∫•p, chip M1, m√†n h√¨nh 13.3 inch Retina, RAM 8GB, SSD 256GB',
    'MacBook Pro M2 - Laptop Apple chuy√™n nghi·ªáp, chip M2, m√†n h√¨nh 13.3 inch Retina, RAM 16GB, SSD 512GB',
    'Laptop MSI Gaming GF63 - Laptop gaming hi·ªáu su·∫•t cao, m√†n h√¨nh 15.6 inch, Intel Core i7, RAM 16GB, RTX 3060',
    'Laptop Razer Blade 15 - Laptop gaming cao c·∫•p, m√†n h√¨nh 15.6 inch 144Hz, Intel Core i9, RAM 32GB, RTX 3080',
    'PC Gaming Dell Alienware - M√°y t√≠nh gaming cao c·∫•p, Intel Core i9, RAM 32GB, RTX 4080, SSD 2TB',
    'PC HP Pavilion Desktop - M√°y t√≠nh vƒÉn ph√≤ng, Intel Core i5, RAM 8GB, HDD 1TB, Windows 11',
    'PC Lenovo ThinkCentre - M√°y t√≠nh doanh nghi·ªáp, Intel Core i7, RAM 16GB, SSD 512GB, b·∫£o m·∫≠t cao',
    'PC Asus ROG Strix - M√°y t√≠nh gaming ASUS, AMD Ryzen 9, RAM 32GB, RTX 4070, RGB lighting',
    'PC Acer Aspire TC - M√°y t√≠nh gia ƒë√¨nh, Intel Core i3, RAM 4GB, HDD 500GB, gi√° r·∫ª',
    'PC Mini Intel NUC - M√°y t√≠nh mini c√¥ng su·∫•t cao, Intel Core i7, RAM 16GB, SSD 512GB, ti·∫øt ki·ªám kh√¥ng gian',
    'PC All-in-One Dell - M√°y t√≠nh all-in-one, m√†n h√¨nh 24 inch, Intel Core i5, RAM 8GB, t√≠ch h·ª£p webcam',
    'B√†n Ph√≠m C∆° Logitech G Pro - B√†n ph√≠m c∆° gaming, switch Cherry MX Blue, RGB backlight, c√≥ d√¢y',
    'Chu·ªôt Gaming Razer DeathAdder - Chu·ªôt gaming chuy√™n nghi·ªáp, 16,000 DPI, 7 n√∫t c√≥ th·ªÉ l·∫≠p tr√¨nh',
    'Tai Nghe Gaming HyperX Cloud - Tai nghe gaming ch·∫•t l∆∞·ª£ng cao, √¢m thanh surround 7.1, microphone detachable',
    'Loa M√°y T√≠nh Creative Pebble - Loa m√°y t√≠nh 2.0, c√¥ng su·∫•t 4.4W, thi·∫øt k·∫ø hi·ªán ƒë·∫°i, √¢m thanh r√µ r√†ng'
  ];

  const prices = [
    15000000, 18000000, 22000000, 16000000, 12000000,
    25000000, 35000000, 28000000, 45000000, 35000000,
    12000000, 20000000, 25000000, 18000000, 8000000,
    15000000, 2500000, 1500000, 2000000, 800000
  ];

  // Diverse computer equipment images
  const images = [
    // Laptop images - Dell, HP, Lenovo, Asus, Acer
    'https://images.unsplash.com/photo-1496181133206-80ce9b88a853?w=800&h=600&fit=crop', // Dell Inspiron
    'https://images.unsplash.com/photo-1549317661-bd32c8ce0db2?w=800&h=600&fit=crop', // HP Pavilion
    'https://images.unsplash.com/photo-1552519507-da3b142c6e3d?w=800&h=600&fit=crop', // Lenovo ThinkPad
    'https://images.unsplash.com/photo-1617814076367-b759c7d7e738?w=800&h=600&fit=crop', // Asus VivoBook
    'https://images.unsplash.com/photo-1555215695-3004980ad54e?w=800&h=600&fit=crop', // Acer Aspire
    // MacBook images
    'https://images.unsplash.com/photo-1465101178521-c1a9136a3b99?w=800&h=600&fit=crop', // MacBook Air
    'https://images.unsplash.com/photo-1465101178521-c1a9136a3b99?w=800&h=600&fit=crop', // MacBook Pro
    // Gaming Laptop images
    'https://images.unsplash.com/photo-1593640408182-31c70c8268f5?w=800&h=600&fit=crop', // MSI Gaming
    'https://images.unsplash.com/photo-1593640408182-31c70c8268f5?w=800&h=600&fit=crop', // Razer Blade
    // Desktop PC images - Gaming & Office
    'https://images.unsplash.com/photo-1593640408182-31c70c8268f5?w=800&h=600&fit=crop', // Dell Alienware
    'https://images.unsplash.com/photo-1593640408182-31c70c8268f5?w=800&h=600&fit=crop', // HP Pavilion Desktop
    'https://images.unsplash.com/photo-1593640408182-31c70c8268f5?w=800&h=600&fit=crop', // Lenovo ThinkCentre
    'https://images.unsplash.com/photo-1593640408182-31c70c8268f5?w=800&h=600&fit=crop', // Asus ROG
    'https://images.unsplash.com/photo-1593640408182-31c70c8268f5?w=800&h=600&fit=crop', // Acer Aspire TC
    'https://images.unsplash.com/photo-1593640408182-31c70c8268f5?w=800&h=600&fit=crop', // Intel NUC
    'https://images.unsplash.com/photo-1593640408182-31c70c8268f5?w=800&h=600&fit=crop', // Dell All-in-One
    // Accessories images - Keyboard, Mouse, Headset, Speakers
    'https://images.unsplash.com/photo-1527864550417-7fd91fc51a46?w=800&h=600&fit=crop', // Logitech Keyboard
    'https://images.unsplash.com/photo-1527864550417-7fd91fc51a46?w=800&h=600&fit=crop', // Razer Mouse
    'https://images.unsplash.com/photo-1527864550417-7fd91fc51a46?w=800&h=600&fit=crop', // HyperX Headset
    'https://images.unsplash.com/photo-1527864550417-7fd91fc51a46?w=800&h=600&fit=crop'  // Creative Speakers
  ];

  for (let i = 0; i < deviceNames.length; i++) {
    const now = new Date();
    const startDate = new Date(now.getTime() + (i * 7) * 24 * 60 * 60 * 1000); // M·ªói thi·∫øt b·ªã c√°ch nhau 7 ng√†y
    const endDate = new Date(startDate.getTime() + 30 * 24 * 60 * 60 * 1000); // K√©o d√†i 30 ng√†y
    
    products.push({
      Product_Name: deviceNames[i],
      Description: descriptions[i],
      Price: prices[i],
      Main_Image: images[i],
      Images: [images[i]],
      RentalStartDate: startDate,
      RentalEndDate: endDate,
      Stock: Math.floor(Math.random() * 10) + 1,
      Specifications: {
        Processor: 'Intel Core i5',
        RAM: '8GB DDR4',
        Storage: '256GB SSD',
        Display: '15.6 inch FHD',
        Graphics: 'Integrated',
        OS: 'Windows 11'
      },
      Status: 'active'
    });
  }

  return products;
}

const sampleProducts = generateSampleProducts();

// Sample services data with computer-related images
const sampleServices = [
  {
    Name: 'S·ª≠a ch·ªØa m√°y t√≠nh',
    Description: 'D·ªãch v·ª• s·ª≠a ch·ªØa m√°y t√≠nh, laptop, PC chuy√™n nghi·ªáp',
    Price: 500000,
    Status: 'available',
    ImageUrl: 'https://images.unsplash.com/photo-1593640408182-31c70c8268f5?w=800&h=600&fit=crop'
  },
  {
    Name: 'N√¢ng c·∫•p RAM',
    Description: 'D·ªãch v·ª• n√¢ng c·∫•p RAM cho laptop v√† m√°y t√≠nh ƒë·ªÉ b√†n',
    Price: 300000,
    Status: 'available',
    ImageUrl: 'https://images.unsplash.com/photo-1527864550417-7fd91fc51a46?w=800&h=600&fit=crop'
  },
  {
    Name: 'Thay ·ªï c·ª©ng SSD',
    Description: 'D·ªãch v·ª• thay ·ªï c·ª©ng HDD sang SSD tƒÉng t·ªëc ƒë·ªô',
    Price: 800000,
    Status: 'available',
    ImageUrl: 'https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=800&h=600&fit=crop'
  },
  {
    Name: 'C√†i ƒë·∫∑t ph·∫ßn m·ªÅm',
    Description: 'D·ªãch v·ª• c√†i ƒë·∫∑t Windows, Office v√† c√°c ph·∫ßn m·ªÅm kh√°c',
    Price: 200000,
    Status: 'available',
    ImageUrl: 'https://images.unsplash.com/photo-1496181133206-80ce9b88a853?w=800&h=600&fit=crop'
  },
  {
    Name: 'Kh√¥i ph·ª•c d·ªØ li·ªáu',
    Description: 'D·ªãch v·ª• kh√¥i ph·ª•c d·ªØ li·ªáu t·ª´ ·ªï c·ª©ng b·ªã h·ªèng',
    Price: 1000000,
    Status: 'available',
    ImageUrl: 'https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=800&h=600&fit=crop'
  }
];

// Sample news events data with computer-related images
const sampleNewsEvents = [
  {
    Title: 'Minh Duy Technology ra m·∫Øt d·ªãch v·ª• thu√™ thi·∫øt b·ªã c√¥ng ngh·ªá',
    Content: 'Minh Duy Technology v·ª´a gi·ªõi thi·ªáu d·ªãch v·ª• thu√™ thi·∫øt b·ªã c√¥ng ngh·ªá v·ªõi ƒë·∫ßy ƒë·ªß laptop, PC, ph·ª• ki·ªán v√† d·ªãch v·ª• h·ªó tr·ª£.',
    PublishDate: new Date('2024-06-01'),
    ImageUrl: 'https://images.unsplash.com/photo-1496181133206-80ce9b88a853?w=800&h=600&fit=crop',
    Status: 'published'
  },
  {
    Title: 'Minh Duy t·ªï ch·ª©c s·ª± ki·ªán tr·∫£i nghi·ªám thi·∫øt b·ªã c√¥ng ngh·ªá',
    Content: 'S·ª± ki·ªán tr·∫£i nghi·ªám thi·∫øt b·ªã c√¥ng ngh·ªá d√†nh cho kh√°ch h√†ng v·ªõi nhi·ªÅu m·∫´u laptop, PC m·ªõi nh·∫•t.',
    PublishDate: new Date('2024-06-15'),
    ImageUrl: 'https://images.unsplash.com/photo-1593640408182-31c70c8268f5?w=800&h=600&fit=crop',
    Status: 'published'
  },
  {
    Title: 'Minh Duy khai tr∆∞∆°ng showroom c√¥ng ngh·ªá m·ªõi t·∫°i ƒê√† N·∫µng',
    Content: 'Showroom c√¥ng ngh·ªá Minh Duy m·ªõi t·∫°i ƒê√† N·∫µng v·ªõi di·ªán t√≠ch 500m2, tr∆∞ng b√†y ƒë·∫ßy ƒë·ªß c√°c thi·∫øt b·ªã c√¥ng ngh·ªá.',
    PublishDate: new Date('2024-07-01'),
    ImageUrl: 'https://images.unsplash.com/photo-1527864550417-7fd91fc51a46?w=800&h=600&fit=crop',
    Status: 'published'
  },
  {
    Title: 'Minh Duy gi·ªõi thi·ªáu d·ªãch v·ª• IT Support 24/7',
    Content: 'Minh Duy v·ª´a gi·ªõi thi·ªáu d·ªãch v·ª• IT Support 24/7 v·ªõi kh·∫£ nƒÉng h·ªó tr·ª£ k·ªπ thu·∫≠t m·ªçi l√∫c.',
    PublishDate: new Date('2024-07-15'),
    ImageUrl: 'https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=800&h=600&fit=crop',
    Status: 'published'
  },
  {
    Title: 'Minh Duy t·ªï ch·ª©c ch∆∞∆°ng tr√¨nh ∆∞u ƒë√£i thu√™ thi·∫øt b·ªã',
    Content: 'Ch∆∞∆°ng tr√¨nh ∆∞u ƒë√£i ƒë·∫∑c bi·ªát d√†nh cho kh√°ch h√†ng thu√™ thi·∫øt b·ªã c√¥ng ngh·ªá trong th√°ng 8.',
    PublishDate: new Date('2024-08-01'),
    ImageUrl: 'https://images.unsplash.com/photo-1496181133206-80ce9b88a853?w=800&h=600&fit=crop',
    Status: 'published'
  },
  {
    Title: 'Minh Duy ra m·∫Øt d·ªãch v·ª• Cloud Storage',
    Content: 'Minh Duy v·ª´a ra m·∫Øt d·ªãch v·ª• Cloud Storage v·ªõi dung l∆∞·ª£ng l∆∞u tr·ªØ kh√¥ng gi·ªõi h·∫°n.',
    PublishDate: new Date('2024-08-15'),
    ImageUrl: 'https://images.unsplash.com/photo-1593640408182-31c70c8268f5?w=800&h=600&fit=crop',
    Status: 'published'
  },
  {
    Title: 'Minh Duy t·ªï ch·ª©c workshop b·∫£o tr√¨ m√°y t√≠nh',
    Content: 'Workshop b·∫£o tr√¨ m√°y t√≠nh mi·ªÖn ph√≠ d√†nh cho kh√°ch h√†ng v·ªõi c√°c chuy√™n gia k·ªπ thu·∫≠t.',
    PublishDate: new Date('2024-09-01'),
    ImageUrl: 'https://images.unsplash.com/photo-1527864550417-7fd91fc51a46?w=800&h=600&fit=crop',
    Status: 'published'
  },
  {
    Title: 'Minh Duy gi·ªõi thi·ªáu ·ª©ng d·ª•ng qu·∫£n l√Ω thi·∫øt b·ªã',
    Content: '·ª®ng d·ª•ng Minh Duy Device Manager m·ªõi v·ªõi nhi·ªÅu t√≠nh nƒÉng qu·∫£n l√Ω thi·∫øt b·ªã thu√™.',
    PublishDate: new Date('2024-09-15'),
    ImageUrl: 'https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=800&h=600&fit=crop',
    Status: 'published'
  },
  {
    Title: 'Minh Duy t·ªï ch·ª©c s·ª± ki·ªán c√¥ng ngh·ªá gia ƒë√¨nh',
    Content: 'Ng√†y h·ªôi c√¥ng ngh·ªá gia ƒë√¨nh v·ªõi nhi·ªÅu ho·∫°t ƒë·ªông tr·∫£i nghi·ªám thi·∫øt b·ªã d√†nh cho kh√°ch h√†ng v√† ng∆∞·ªùi th√¢n.',
    PublishDate: new Date('2024-08-10'),
    ImageUrl: 'https://images.unsplash.com/photo-1496181133206-80ce9b88a853?w=800&h=600&fit=crop',
    Status: 'published'
  },
  {
    Title: 'Minh Duy khai tr∆∞∆°ng trung t√¢m d·ªãch v·ª• m·ªõi t·∫°i H√† N·ªôi',
    Content: 'Trung t√¢m d·ªãch v·ª• Minh Duy t·∫°i H√† N·ªôi cung c·∫•p ƒë·∫ßy ƒë·ªß c√°c d·ªãch v·ª• s·ª≠a ch·ªØa, b·∫£o h√†nh v√† h·ªó tr·ª£ k·ªπ thu·∫≠t.',
    PublishDate: new Date('2024-08-20'),
    ImageUrl: 'https://images.unsplash.com/photo-1593640408182-31c70c8268f5?w=800&h=600&fit=crop',
    Status: 'published'
  },
  {
    Title: 'Minh Duy ra m·∫Øt d·ªãch v·ª• thu√™ MacBook cao c·∫•p',
    Content: 'D·ªãch v·ª• thu√™ MacBook cao c·∫•p v·ªõi ƒë·∫ßy ƒë·ªß phi√™n b·∫£n M1, M2 v·ª´a ƒë∆∞·ª£c gi·ªõi thi·ªáu t·∫°i Vi·ªát Nam.',
    PublishDate: new Date('2024-09-01'),
    ImageUrl: 'https://images.unsplash.com/photo-1465101178521-c1a9136a3b99?w=800&h=600&fit=crop',
    Status: 'published'
  },
  {
    Title: 'Minh Duy t·ªï ch·ª©c workshop b·∫£o m·∫≠t d·ªØ li·ªáu mi·ªÖn ph√≠',
    Content: 'Kh√°ch h√†ng Minh Duy ƒë∆∞·ª£c tham gia workshop b·∫£o m·∫≠t d·ªØ li·ªáu mi·ªÖn ph√≠ v·ªõi c√°c chuy√™n gia b·∫£o m·∫≠t h√†ng ƒë·∫ßu.',
    PublishDate: new Date('2024-09-10'),
    ImageUrl: 'https://images.unsplash.com/photo-1527864550417-7fd91fc51a46?w=800&h=600&fit=crop',
    Status: 'published'
  }
];

// Function to generate sample device rental orders
function generateSampleDeviceRentals(users, products) {
  const orders = [];
  const statuses = ['pending', 'confirmed', 'delivered', 'returned', 'cancelled'];
  const addresses = [
    '123 Nguy·ªÖn Hu·ªá, Qu·∫≠n 1, TP.HCM',
    '456 L√™ L·ª£i, Qu·∫≠n 3, TP.HCM',
    '789 Tr·∫ßn H∆∞ng ƒê·∫°o, Qu·∫≠n 5, TP.HCM',
    '321 V√µ VƒÉn T·∫ßn, Qu·∫≠n 3, TP.HCM',
    '654 ƒêi·ªán Bi√™n Ph·ªß, Qu·∫≠n B√¨nh Th·∫°nh, TP.HCM',
    '987 C√°ch M·∫°ng Th√°ng 8, Qu·∫≠n 10, TP.HCM',
    '147 Nguy·ªÖn Th·ªã Minh Khai, Qu·∫≠n 1, TP.HCM',
    '258 L√Ω T·ª± Tr·ªçng, Qu·∫≠n 1, TP.HCM',
    '369 Hai B√† Tr∆∞ng, Qu·∫≠n 1, TP.HCM',
    '741 ƒê·ªìng Kh·ªüi, Qu·∫≠n 1, TP.HCM'
  ];
  const now = new Date();

  // T·ªïng s·ªë ƒë∆°n t·ªëi ƒëa cho to√†n b·ªô s·∫£n ph·∫©m
  let totalOrders = 0;
  const maxTotalOrders = 200;

  // Sinh s·ªë l∆∞·ª£ng ƒë∆°n cho t·ª´ng thi·∫øt b·ªã: ph√¢n ph·ªëi ng·∫´u nhi√™n, c√≥ thi·∫øt b·ªã nhi·ªÅu, c√≥ thi·∫øt b·ªã √≠t
  const productOrderCounts = products.map((_, idx) => {
    // TƒÉng x√°c su·∫•t thi·∫øt b·ªã ƒë·∫ßu danh s√°ch nhi·ªÅu ƒë∆°n, thi·∫øt b·ªã cu·ªëi √≠t ƒë∆°n
    let base = Math.floor(Math.random() * 10) + 2; // 2-11
    if (idx % 7 === 0) base += Math.floor(Math.random() * 8); // M·ªôt s·ªë thi·∫øt b·ªã n·ªïi b·∫≠t
    if (idx % 13 === 0) base += Math.floor(Math.random() * 5); // M·ªôt s·ªë thi·∫øt b·ªã r·∫•t n·ªïi b·∫≠t
    return Math.min(base, 20);
  });

  products.forEach((product, idx) => {
    let numOrders = productOrderCounts[idx];
    if (totalOrders + numOrders > maxTotalOrders) numOrders = maxTotalOrders - totalOrders;
    if (numOrders < 2) numOrders = 2;
    for (let i = 0; i < numOrders; i++) {
      if (totalOrders >= maxTotalOrders) break;
      const user = users[(idx * 7 + i) % users.length];
      const status = statuses[(idx + i) % statuses.length];
      const address = addresses[(idx + i) % addresses.length];
      // Random date within last 30 days
      const daysAgo = Math.floor(Math.random() * 30);
      const orderDate = new Date(now.getTime() - daysAgo * 24 * 60 * 60 * 1000);
      // Random rental dates (future dates)
      const rentalStartDays = Math.floor(Math.random() * 7) + 1;
      const rentalEndDays = rentalStartDays + Math.floor(Math.random() * 30) + 7; // 7-37 days
      const rentalStartDate = new Date(now.getTime() + rentalStartDays * 24 * 60 * 60 * 1000);
      const rentalEndDate = new Date(now.getTime() + rentalEndDays * 24 * 60 * 60 * 1000);
      // Random amount based on product price
      const baseAmount = product.Price || 20000000;
      const amountVariation = Math.random() * 0.3 - 0.15;
      const finalAmount = Math.round(baseAmount * (1 + amountVariation));
      // Random ng√†y t·∫°o ƒë∆°n (trong 30 ng√†y g·∫ßn nh·∫•t)
      const createdAt = new Date(now.getTime() - daysAgo * 24 * 60 * 60 * 1000);
      orders.push({
        UserID: user._id,
        ProductID: product._id,
        Order_Date: orderDate,
        Rental_Start_Date: rentalStartDate,
        Rental_End_Date: rentalEndDate,
        Address: address,
        Status: status,
        Total_Amount: finalAmount,
        Quantity: Math.floor(Math.random() * 3) + 1, // 1-3 items
        Notes: `ƒê∆°n thu√™ ${product.Product_Name} cho ${user.FullName}`,
        ImageUrl: product.Main_Image || null,
        createdAt
      });
      totalOrders++;
    }
  });
  return orders;
}

// Migration function
async function migrate() {
  try {
    console.log('üöÄ B·∫Øt ƒë·∫ßu migration v·ªõi h√¨nh ·∫£nh m·ªõi...');
    
    // Ki·ªÉm tra environment variables
    if (!process.env.MONGO_URI) {
      console.error('‚ùå MONGO_URI ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh');
      console.log('üí° H√£y th√™m MONGO_URI v√†o environment variables');
      return;
    }

    console.log('üì° K·∫øt n·ªëi MongoDB...');
    
    // Retry logic cho k·∫øt n·ªëi MongoDB
    let connected = false;
    const maxRetries = 5;
    const retryDelay = 5000;
    
    for (let i = 0; i < maxRetries; i++) {
      try {
        await mongoose.connect(process.env.MONGO_URI, {
          useNewUrlParser: true,
          useUnifiedTopology: true,
          serverSelectionTimeoutMS: 10000,
          socketTimeoutMS: 45000,
        });
        console.log('‚úÖ K·∫øt n·ªëi MongoDB th√†nh c√¥ng');
        connected = true;
        break;
      } catch (error) {
        console.error(`‚ùå L·ªói k·∫øt n·ªëi MongoDB l·∫ßn ${i + 1}/${maxRetries}:`, error.message);
        if (i === maxRetries - 1) {
          console.error('‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi MongoDB sau nhi·ªÅu l·∫ßn th·ª≠');
          console.error('üîç Chi ti·∫øt l·ªói:', error);
          return;
        }
        console.log(`‚è≥ Ch·ªù ${retryDelay/1000}s tr∆∞·ªõc khi th·ª≠ l·∫°i...`);
        await new Promise(resolve => setTimeout(resolve, retryDelay));
      }
    }
    
    if (!connected) {
      console.error('‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi MongoDB');
      return;
    }

    const forceReset = process.argv.includes('--force');
    
    if (forceReset) {
      console.log('üóëÔ∏è  X√≥a d·ªØ li·ªáu c≈©...');
      // Clear existing data
      await User.deleteMany({});
      await Role.deleteMany({});
      await RoleUser.deleteMany({});
      await ProductCategory.deleteMany({});
      await Product.deleteMany({});
      await Category.deleteMany({});
      await Service.deleteMany({});
      await NewsEvent.deleteMany({});
      await DeviceRental.deleteMany({});
      console.log('‚úÖ ƒê√£ x√≥a d·ªØ li·ªáu c≈©');
    }

    // Ki·ªÉm tra xem d·ªØ li·ªáu ƒë√£ t·ªìn t·∫°i ch∆∞a
    const existingRoles = await Role.countDocuments();
    const existingUsers = await User.countDocuments();
    const existingProducts = await Product.countDocuments();
    
    if (existingRoles > 0 && existingUsers > 0 && existingProducts > 0 && !forceReset) {
      console.log('‚úÖ D·ªØ li·ªáu ƒë√£ t·ªìn t·∫°i, b·ªè qua migration');
      console.log(`üìä D·ªØ li·ªáu hi·ªán c√≥: ${existingRoles} roles, ${existingUsers} users, ${existingProducts} products`);
      return;
    }

    console.log('üë• T·∫°o roles...');
    // Create roles only if they don't exist
    let createdRoles = [];
    if (existingRoles === 0) {
      createdRoles = await Role.insertMany(sampleRoles);
      console.log('‚úÖ ƒê√£ t·∫°o roles');
    } else {
      createdRoles = await Role.find({});
      console.log('‚úÖ Roles ƒë√£ t·ªìn t·∫°i');
    }
    
    const adminRole = createdRoles.find(role => role.Role_Name === 'admin');
    const userRole = createdRoles.find(role => role.Role_Name === 'user');

    console.log('üë§ T·∫°o admin user...');
    // Create admin user only if it doesn't exist
    let adminUser = await User.findOne({ UserName: 'admin' });
    if (!adminUser) {
      adminUser = new User({
        UserName: 'admin',
        Password: 'admin123',
        Email: 'admin@minhduy.com',
        Phone: '0123456789',
        FullName: 'Administrator',
        Address: 'H√† N·ªôi, Vi·ªát Nam',
        Role: 'admin',
        Status: 'active'
      });
      await adminUser.save();
      console.log('‚úÖ ƒê√£ t·∫°o admin user');
    } else {
      console.log('‚úÖ Admin user ƒë√£ t·ªìn t·∫°i');
    }

    console.log('üîó T·∫°o role-user relationship...');
    // Create role-user relationship for admin only if it doesn't exist
    const existingRoleUser = await RoleUser.findOne({ UserID: adminUser._id, RoleID: adminRole._id });
    if (!existingRoleUser) {
      await RoleUser.create({
        UserID: adminUser._id,
        RoleID: adminRole._id,
        Status: 'active'
      });
      console.log('‚úÖ ƒê√£ t·∫°o role-user relationship');
    } else {
      console.log('‚úÖ Role-user relationship ƒë√£ t·ªìn t·∫°i');
    }

    console.log('üìÇ T·∫°o group categories...');
    // Create group categories only if they don't exist
    let createdGroupCategories = [];
    const existingGroupCategories = await Category.countDocuments({ ParentID: null });
    if (existingGroupCategories === 0) {
      createdGroupCategories = await Category.insertMany(sampleGroupCategories);
      console.log('‚úÖ ƒê√£ t·∫°o group categories');
    } else {
      createdGroupCategories = await Category.find({ ParentID: null });
      console.log('‚úÖ Group categories ƒë√£ t·ªìn t·∫°i');
    }

    console.log('üìÅ T·∫°o sub categories...');
    // Create sub categories with proper ParentID mapping
    let createdSubCategories = [];
    const existingSubCategories = await Category.countDocuments({ ParentID: { $ne: null } });
    // Force t·∫°o l·∫°i sub-categories n·∫øu c√≥ --force flag
    if (existingSubCategories === 0 || forceReset) {
      // T·∫°o sub-categories cho m·ªói group - ƒë·∫£m b·∫£o m·ªói group c√≥ 10-15 sub-categories
      const subCategoriesWithParent = [];
      
      createdGroupCategories.forEach((group, groupIndex) => {
        // M·ªói group s·∫Ω c√≥ ng·∫´u nhi√™n t·ª´ 10-15 sub-categories
        const numSub = Math.floor(Math.random() * 6) + 10; // 10-15
        
        for (let i = 0; i < numSub; i++) {
          subCategoriesWithParent.push({
            Name: `${group.Name} - Sub ${i + 1}`,
            Description: `Sub-category ${i + 1} c·ªßa ${group.Name}`,
            ParentID: group._id,
            Status: 'active',
            Order: i + 1
          });
        }
      });

      // X√≥a sub-categories c≈© n·∫øu force reset
      if (forceReset && existingSubCategories > 0) {
        await Category.deleteMany({ ParentID: { $ne: null } });
        console.log('üóëÔ∏è ƒê√£ x√≥a sub-categories c≈©');
      }
      
      createdSubCategories = await Category.insertMany(subCategoriesWithParent);
      console.log('‚úÖ ƒê√£ t·∫°o sub categories');
    } else {
      createdSubCategories = await Category.find({ ParentID: { $ne: null } });
      console.log('‚úÖ Sub categories ƒë√£ t·ªìn t·∫°i');
    }

    console.log('üíª T·∫°o products v·ªõi h√¨nh ·∫£nh m·ªõi...');
    // Create products only if they don't exist
    let dbProducts = [];
    if (existingProducts === 0) {
      const productsWithCategories = sampleProducts.map((product, index) => {
        const categoryIndex = index % createdSubCategories.length;
        return {
          ...product,
          CategoryID: createdSubCategories[categoryIndex]._id
        };
      });
      await Product.insertMany(productsWithCategories);
      console.log('‚úÖ ƒê√£ t·∫°o products v·ªõi h√¨nh ·∫£nh m·ªõi');
    } else {
      console.log('‚úÖ Products ƒë√£ t·ªìn t·∫°i');
    }
    
    // L·∫•y l·∫°i danh s√°ch s·∫£n ph·∫©m t·ª´ DB
    dbProducts = await Product.find({});

    console.log('üîß T·∫°o services...');
    // Create services only if they don't exist
    const existingServices = await Service.countDocuments();
    if (existingServices === 0) {
      await Service.insertMany(sampleServices);
      console.log('‚úÖ ƒê√£ t·∫°o services');
    } else {
      console.log('‚úÖ Services ƒë√£ t·ªìn t·∫°i');
    }

    console.log('üì∞ T·∫°o news events...');
    // Create news events only if they don't exist
    const existingNewsEvents = await NewsEvent.countDocuments();
    if (existingNewsEvents === 0) {
      await NewsEvent.insertMany(sampleNewsEvents);
      console.log('‚úÖ ƒê√£ t·∫°o news events');
    } else {
      console.log('‚úÖ News events ƒë√£ t·ªìn t·∫°i');
    }

    console.log('üë• T·∫°o users...');
    // Create users only if they don't exist
    let createdUsers = [];
    if (existingUsers === 0) {
      createdUsers = await User.insertMany(sampleUsers);
      console.log('‚úÖ ƒê√£ t·∫°o users');
    } else {
      createdUsers = await User.find({ UserName: { $ne: 'admin' } });
      console.log('‚úÖ Users ƒë√£ t·ªìn t·∫°i');
    }

    console.log('üìã T·∫°o device rental orders...');
    // Create device rental orders only if they don't exist
    const existingOrders = await DeviceRental.countDocuments();
    if (existingOrders === 0) {
      const deviceRentalOrders = generateSampleDeviceRentals(createdUsers, dbProducts);
      await DeviceRental.insertMany(deviceRentalOrders);
      console.log('‚úÖ ƒê√£ t·∫°o device rental orders');
    } else {
      console.log('‚úÖ Device rental orders ƒë√£ t·ªìn t·∫°i');
    }

    console.log('üéâ Migration ho√†n th√†nh th√†nh c√¥ng v·ªõi h√¨nh ·∫£nh m·ªõi!');
    console.log('üìä D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c t·∫°o:');
    console.log(`   - ${createdRoles.length} roles`);
    console.log(`   - ${createdGroupCategories.length} group categories`);
    console.log(`   - ${createdSubCategories.length} sub categories`);
    console.log(`   - ${dbProducts.length} products v·ªõi h√¨nh ·∫£nh m√°y t√≠nh`);
    console.log(`   - ${sampleServices.length} services`);
    console.log(`   - ${sampleNewsEvents.length} news events`);
    console.log(`   - ${createdUsers.length} users`);
    console.log(`   - ${existingOrders === 0 ? 'device rental orders' : 'orders already exist'}`);

  } catch (error) {
    console.error('‚ùå L·ªói trong qu√° tr√¨nh migration:', error.message);
    console.error('üîç Chi ti·∫øt l·ªói:', error);
    
    if (error.message.includes('MONGO_URI')) {
      console.log('\nüí° H∆∞·ªõng d·∫´n s·ª≠a l·ªói:');
      console.log('1. Ki·ªÉm tra file .env c√≥ t·ªìn t·∫°i kh√¥ng');
      console.log('2. ƒê·∫£m b·∫£o MONGO_URI ƒë∆∞·ª£c c·∫•u h√¨nh ƒë√∫ng');
      console.log('3. V√≠ d·ª•: MONGO_URI=mongodb+srv://username:password@cluster.mongodb.net/database');
    }
  } finally {
    if (mongoose.connection.readyState === 1) {
      await mongoose.disconnect();
      console.log('üîå ƒê√£ ng·∫Øt k·∫øt n·ªëi MongoDB');
    }
  }
}

// Run migration
migrate(); 