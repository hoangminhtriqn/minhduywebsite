const mongoose = require("mongoose");
const bcrypt = require("bcryptjs");
require("dotenv").config();

// Import all models
const User = require("./models/User");
const { USER_ROLES, LOGIN_PROVIDERS } = require("./models/User");
const Role = require("./models/Role");
const RoleUser = require("./models/RoleUser");
const Product = require("./models/Product");
const Category = require("./models/Category");
const Service = require("./models/Service");
const NewsEvent = require("./models/NewsEvent");
const { NEWS_STATUS } = require("./utils/enums");

const Pricing = require("./models/Pricing");
const Location = require("./models/Location");
const Setting = require("./models/Setting");
const Booking = require("./models/Booking");
const ServiceType = require("./models/ServiceType");
const Slide = require("./models/Slide");

const sampleLocations = [
  {
    name: "MINH DUY - ƒê√† N·∫µng",
    address: "S·ªë 132 L√™ Du·∫©n, ƒê·ªëng ƒêa, H√† N·ªôi",
    coordinates: "15.566762797033958,108.47919866217119",
    mapUrl: "https://maps.app.goo.gl/tjX4cmFR9nJFaur58",
    isMainAddress: true,
  },
  {
    name: "MINH DUY - H·ªì Ch√≠ Minh",
    address: "S·ªë 456 Nguy·ªÖn Hu·ªá, Qu·∫≠n 1, TP.HCM",
    coordinates: "10.123456,106.123456",
    mapUrl: "https://maps.app.goo.gl/example2",
    isMainAddress: false,
  },
  {
    name: "MINH DUY - H√† N·ªôi",
    address: "S·ªë 789 Tr·∫ßn H∆∞ng ƒê·∫°o, Ho√†n Ki·∫øm, H√† N·ªôi",
    coordinates: "21.123456,105.123456",
    mapUrl: "https://maps.app.goo.gl/example3",
    isMainAddress: false,
  },
];

const sampleSlides = [
  {
    src: "/images/bmw-3840x2160.jpg",
    alt: "Minh Duy Technology - C√¥ng ty c√¥ng ngh·ªá thi·∫øt b·ªã vi t√≠nh h√†ng ƒë·∫ßu",
    order: 1,
    isActive: true,
  },
  {
    src: "/images/bmw-x5m.jpg",
    alt: "Laptop Gaming - Thi·∫øt b·ªã c√¥ng ngh·ªá cao c·∫•p t·∫°i Minh Duy",
    order: 2,
    isActive: true,
  },
  {
    src: "/images/bmw-service-center.jpg",
    alt: "Trung t√¢m d·ªãch v·ª• c√¥ng ngh·ªá Minh Duy - S·ª≠a ch·ªØa b·∫£o h√†nh thi·∫øt b·ªã",
    order: 3,
    isActive: true,
  },
  {
    src: "/images/bmw-service-hanoi.jpg",
    alt: "D·ªãch v·ª• c√¥ng ngh·ªá t·∫°i Minh Duy - ƒê·∫°i l√Ω thi·∫øt b·ªã vi t√≠nh uy t√≠n",
    order: 4,
    isActive: true,
  },
];

// Sample data
const sampleRoles = [
  {
    Role_Name: USER_ROLES.ADMIN,
    Role_Description: "Qu·∫£n tr·ªã vi√™n h·ªá th·ªëng - To√†n quy·ªÅn",
    Permissions: [
      // Dashboard
      "dashboard.view",

      // Users
      "users.view",
      "users.edit",
      "users.status.update",
      "users.role.view",
      "users.role.update",

      // Products
      "products.view",
      "products.create",
      "products.edit",
      "products.delete",
      "products.favorites.view",

      // Categories
      "categories.view",
      "categories.create",
      "categories.edit",
      "categories.delete",
      "categories.reorder",
      "categories.visibility.toggle",
      "categories.hierarchy.manage",

      // Services
      "services.view",
      "services.create",
      "services.edit",
      "services.delete",
      "services.media.upload",

      // Bookings
      "bookings.view",
      "bookings.details.view",
      "bookings.status.update",
      "bookings.delete",
      "bookings.service_types.manage",

      // News
      "news.view",
      "news.create",
      "news.edit",
      "news.delete",
      "news.preview",
      "news.media.upload",

      // Pricing
      "pricing.view",
      "pricing.create",
      "pricing.edit",
      "pricing.delete",
      "pricing.details.view",
      "pricing.features.manage",
      "pricing.documents.manage",

      // Settings
      "settings.view",
      "settings.update",
      "settings.locations.manage",
      "settings.slides.manage",
      "settings.contact.update",
      "settings.seo.update",

      // Permissions
      "permissions.view",
      "permissions.create",
      "permissions.edit",
      "permissions.delete",
      "permissions.assign",
      "permissions.revoke",
    ],
  },
  {
    Role_Name: USER_ROLES.USER,
    Role_Description: "Ng∆∞·ªùi d√πng th√¥ng th∆∞·ªùng - Ch·ªâ truy c·∫≠p frontend",
    Permissions: [],
  },
  {
    Role_Name: USER_ROLES.EMPLOYEE,
    Role_Description: "Nh√¢n vi√™n - Quy·ªÅn h·∫°n ƒë∆∞·ª£c c·∫•p b·ªüi Admin",
    Permissions: [],
  },
];

// Group Categories (C·∫•p cha)
const sampleGroupCategories = [
  {
    Name: "Laptop & M√°y T√≠nh X√°ch Tay",
    Description: "C√°c lo·∫°i laptop v√† m√°y t√≠nh x√°ch tay",
    Icon: "üíª",
    Image:
      "https://images.unsplash.com/photo-1496181133206-80ce9b88a853?w=800&h=600&fit=crop",
    Order: 1,
  },
  {
    Name: "M√°y T√≠nh ƒê·ªÉ B√†n",
    Description: "PC gaming, vƒÉn ph√≤ng, ƒë·ªì h·ªça",
    Icon: "üñ•Ô∏è",
    Image:
      "https://images.unsplash.com/photo-1593640408182-31c70c8268f5?w=800&h=600&fit=crop",
    Order: 2,
  },
  {
    Name: "Ph·ª• Ki·ªán M√°y T√≠nh",
    Description: "B√†n ph√≠m, chu·ªôt, tai nghe, loa",
    Icon: "‚å®Ô∏è",
    Image:
      "https://images.unsplash.com/photo-1527864550417-7fd91fc51a46?w=800&h=600&fit=crop",
    Order: 3,
  },
  {
    Name: "Thi·∫øt B·ªã Ngo·∫°i Vi",
    Description: "M√°y in, m√°y scan, m√†n h√¨nh, m√°y chi·∫øu",
    Icon: "üñ®Ô∏è",
    Image:
      "https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=800&h=600&fit=crop",
    Order: 4,
  },
  {
    Name: "Thi·∫øt B·ªã M·∫°ng",
    Description: "Router, switch, modem, access point",
    Icon: "üåê",
    Image:
      "https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=800&h=600&fit=crop",
    Order: 5,
  },
  {
    Name: "L∆∞u Tr·ªØ & Backup",
    Description: "·ªî c·ª©ng, USB, th·∫ª nh·ªõ, NAS",
    Icon: "üíæ",
    Image:
      "https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=800&h=600&fit=crop",
    Order: 6,
  },
  {
    Name: "Ph·∫ßn M·ªÅm & B·∫£n Quy·ªÅn",
    Description: "Windows, Office, antivirus, design software",
    Icon: "üõ°Ô∏è",
    Image:
      "https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=800&h=600&fit=crop",
    Order: 7,
  },
  {
    Name: "D·ªãch V·ª• C√¥ng Ngh·ªá",
    Description: "S·ª≠a ch·ªØa, b·∫£o h√†nh, n√¢ng c·∫•p, t∆∞ v·∫•n",
    Icon: "üîß",
    Image:
      "https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=800&h=600&fit=crop",
    Order: 8,
  },
];

// Sample users data
const sampleUsers = [
  // Sample regular users
  {
    UserName: "user1",
    Password: "user123",
    Email: "user1@example.com",
    Phone: "0123456781",
    FullName: "Nguy·ªÖn VƒÉn An",
    Address: "H√† N·ªôi, Vi·ªát Nam",
    Role: USER_ROLES.USER,
    LoginProvider: LOGIN_PROVIDERS.LOCAL,
  },
  {
    UserName: "user2",
    Password: "user123",
    Email: "user2@example.com",
    Phone: "0123456782",
    FullName: "Tr·∫ßn Th·ªã B√¨nh",
    Address: "TP.HCM, Vi·ªát Nam",
    Role: USER_ROLES.USER,
    LoginProvider: LOGIN_PROVIDERS.LOCAL,
  },
  // Sample employees
  {
    UserName: "employee1",
    Password: "employee123",
    Email: "employee1@minhduy.com",
    Phone: "0123456790",
    FullName: "L√™ Th·ªã Nh√¢n Vi√™n",
    Address: "ƒê√† N·∫µng, Vi·ªát Nam",
    Role: USER_ROLES.EMPLOYEE,
    LoginProvider: LOGIN_PROVIDERS.LOCAL,
  },
  {
    UserName: "employee2",
    Password: "employee123",
    Email: "employee2@minhduy.com",
    Phone: "0123456791",
    FullName: "Ph·∫°m VƒÉn Qu·∫£n L√Ω",
    Address: "H√† N·ªôi, Vi·ªát Nam",
    Role: USER_ROLES.EMPLOYEE,
    LoginProvider: LOGIN_PROVIDERS.LOCAL,
  },
  {
    UserName: "employee3",
    Password: "employee123",
    Email: "employee3@minhduy.com",
    Phone: "0123456792",
    FullName: "Nguy·ªÖn Th·ªã H·ªó Tr·ª£",
    Address: "TP.HCM, Vi·ªát Nam",
    Role: USER_ROLES.EMPLOYEE,
    LoginProvider: LOGIN_PROVIDERS.LOCAL,
  },
];

// Sample products data
function generateSampleProducts() {
  const products = [];

  // ƒê·ªãnh nghƒ©a s·∫£n ph·∫©m theo t·ª´ng nh√≥m th·ªÉ lo·∫°i
  const productsByCategory = {
    "Laptop & M√°y T√≠nh X√°ch Tay": [
      {
        name: "Laptop Dell Inspiron 15 3000",
        description:
          "Laptop vƒÉn ph√≤ng hi·ªáu su·∫•t cao, m√†n h√¨nh 15.6 inch, Intel Core i5, RAM 8GB, SSD 256GB",
        price: 15000000,
        image:
          "https://images.unsplash.com/photo-1496181133206-80ce9b88a853?w=800&h=600&fit=crop",
        specs: {
          Processor: "Intel Core i5",
          RAM: "8GB DDR4",
          Storage: "256GB SSD",
          Display: "15.6 inch FHD",
        },
      },
      {
        name: "Laptop HP Pavilion 14",
        description:
          "Laptop m·ªèng nh·∫π, thi·∫øt k·∫ø hi·ªán ƒë·∫°i, m√†n h√¨nh 14 inch, AMD Ryzen 5, RAM 8GB, SSD 512GB",
        price: 18000000,
        image:
          "https://images.unsplash.com/photo-1549317661-bd32c8ce0db2?w=800&h=600&fit=crop",
        specs: {
          Processor: "AMD Ryzen 5",
          RAM: "8GB DDR4",
          Storage: "512GB SSD",
          Display: "14 inch FHD",
        },
      },
      {
        name: "Laptop Lenovo ThinkPad E14",
        description:
          "Laptop doanh nghi·ªáp b·ªÅn b·ªâ, m√†n h√¨nh 14 inch, Intel Core i7, RAM 16GB, SSD 512GB",
        price: 22000000,
        image:
          "https://images.unsplash.com/photo-1552519507-da3b142c6e3d?w=800&h=600&fit=crop",
        specs: {
          Processor: "Intel Core i7",
          RAM: "16GB DDR4",
          Storage: "512GB SSD",
          Display: "14 inch FHD",
        },
      },
      {
        name: "MacBook Air M1",
        description:
          "Laptop Apple cao c·∫•p, chip M1, m√†n h√¨nh 13.3 inch Retina, RAM 8GB, SSD 256GB",
        price: 25000000,
        image:
          "https://images.unsplash.com/photo-1465101178521-c1a9136a3b99?w=800&h=600&fit=crop",
        specs: {
          Processor: "Apple M1",
          RAM: "8GB Unified",
          Storage: "256GB SSD",
          Display: "13.3 inch Retina",
        },
      },
      {
        name: "Laptop MSI Gaming GF63",
        description:
          "Laptop gaming hi·ªáu su·∫•t cao, m√†n h√¨nh 15.6 inch, Intel Core i7, RAM 16GB, RTX 3060",
        price: 28000000,
        image:
          "https://images.unsplash.com/photo-1593640408182-31c70c8268f5?w=800&h=600&fit=crop",
        specs: {
          Processor: "Intel Core i7",
          RAM: "16GB DDR4",
          Storage: "512GB SSD",
          Display: "15.6 inch FHD",
          Graphics: "RTX 3060",
        },
      },
    ],
    "M√°y T√≠nh ƒê·ªÉ B√†n": [
      {
        name: "PC Gaming Dell Alienware",
        description:
          "M√°y t√≠nh gaming cao c·∫•p, Intel Core i9, RAM 32GB, RTX 4080, SSD 2TB",
        price: 35000000,
        image:
          "https://images.unsplash.com/photo-1593640408182-31c70c8268f5?w=800&h=600&fit=crop",
        specs: {
          Processor: "Intel Core i9",
          RAM: "32GB DDR5",
          Storage: "2TB SSD",
          Graphics: "RTX 4080",
        },
      },
      {
        name: "PC HP Pavilion Desktop",
        description:
          "M√°y t√≠nh vƒÉn ph√≤ng, Intel Core i5, RAM 8GB, HDD 1TB, Windows 11",
        price: 12000000,
        image:
          "https://images.unsplash.com/photo-1593640408182-31c70c8268f5?w=800&h=600&fit=crop",
        specs: {
          Processor: "Intel Core i5",
          RAM: "8GB DDR4",
          Storage: "1TB HDD",
          OS: "Windows 11",
        },
      },
      {
        name: "PC Lenovo ThinkCentre",
        description:
          "M√°y t√≠nh doanh nghi·ªáp, Intel Core i7, RAM 16GB, SSD 512GB, b·∫£o m·∫≠t cao",
        price: 20000000,
        image:
          "https://images.unsplash.com/photo-1593640408182-31c70c8268f5?w=800&h=600&fit=crop",
        specs: {
          Processor: "Intel Core i7",
          RAM: "16GB DDR4",
          Storage: "512GB SSD",
          Security: "TPM 2.0",
        },
      },
      {
        name: "PC Asus ROG Strix",
        description:
          "M√°y t√≠nh gaming ASUS, AMD Ryzen 9, RAM 32GB, RTX 4070, RGB lighting",
        price: 25000000,
        image:
          "https://images.unsplash.com/photo-1593640408182-31c70c8268f5?w=800&h=600&fit=crop",
        specs: {
          Processor: "AMD Ryzen 9",
          RAM: "32GB DDR5",
          Storage: "1TB SSD",
          Graphics: "RTX 4070",
        },
      },
      {
        name: "PC All-in-One Dell",
        description:
          "M√°y t√≠nh all-in-one, m√†n h√¨nh 24 inch, Intel Core i5, RAM 8GB, t√≠ch h·ª£p webcam",
        price: 15000000,
        image:
          "https://images.unsplash.com/photo-1593640408182-31c70c8268f5?w=800&h=600&fit=crop",
        specs: {
          Processor: "Intel Core i5",
          RAM: "8GB DDR4",
          Storage: "256GB SSD",
          Display: "24 inch FHD",
        },
      },
    ],
    "Ph·ª• Ki·ªán M√°y T√≠nh": [
      {
        name: "B√†n Ph√≠m C∆° Logitech G Pro",
        description:
          "B√†n ph√≠m c∆° gaming, switch Cherry MX Blue, RGB backlight, c√≥ d√¢y",
        price: 2500000,
        image:
          "https://images.unsplash.com/photo-1587829741301-dc798b83add3?w=800&h=600&fit=crop",
        specs: {
          Switch: "Cherry MX Blue",
          Backlight: "RGB",
          Connection: "USB-C",
          Layout: "Full-size",
        },
      },
      {
        name: "Chu·ªôt Gaming Razer DeathAdder",
        description:
          "Chu·ªôt gaming chuy√™n nghi·ªáp, 16,000 DPI, 7 n√∫t c√≥ th·ªÉ l·∫≠p tr√¨nh",
        price: 1500000,
        image:
          "https://images.unsplash.com/photo-1527864550417-7fd91fc51a46?w=800&h=600&fit=crop",
        specs: {
          DPI: "16,000",
          Buttons: "7 Programmable",
          Sensor: "Optical",
          Weight: "82g",
        },
      },
      {
        name: "Tai Nghe Gaming HyperX Cloud",
        description:
          "Tai nghe gaming ch·∫•t l∆∞·ª£ng cao, √¢m thanh surround 7.1, microphone detachable",
        price: 2000000,
        image:
          "https://images.unsplash.com/photo-1505740420928-5e560c06d30e?w=800&h=600&fit=crop",
        specs: {
          Audio: "7.1 Surround",
          Microphone: "Detachable",
          Connection: "3.5mm/USB",
          Weight: "320g",
        },
      },
      {
        name: "Loa M√°y T√≠nh Creative Pebble",
        description:
          "Loa m√°y t√≠nh 2.0, c√¥ng su·∫•t 4.4W, thi·∫øt k·∫ø hi·ªán ƒë·∫°i, √¢m thanh r√µ r√†ng",
        price: 800000,
        image:
          "https://images.unsplash.com/photo-1545454675-3531b543be5d?w=800&h=600&fit=crop",
        specs: {
          Power: "4.4W",
          Configuration: "2.0",
          Connection: "USB/3.5mm",
          Design: "Modern",
        },
      },
      {
        name: "Webcam Logitech C920",
        description:
          "Webcam HD 1080p, autofocus, stereo microphone, t∆∞∆°ng th√≠ch ƒëa n·ªÅn t·∫£ng",
        price: 1200000,
        image:
          "https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=800&h=600&fit=crop",
        specs: {
          Resolution: "1080p",
          Focus: "Autofocus",
          Audio: "Stereo",
          Compatibility: "Multi-platform",
        },
      },
    ],
    "Thi·∫øt B·ªã Ngo·∫°i Vi": [
      {
        name: "M√°y In HP LaserJet Pro",
        description:
          "M√°y in laser ƒë∆°n s·∫Øc, t·ªëc ƒë·ªô 30 trang/ph√∫t, k·∫øt n·ªëi WiFi, b·ªô nh·ªõ 128MB",
        price: 3500000,
        image:
          "https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=800&h=600&fit=crop",
        specs: {
          Type: "Laser",
          Speed: "30 ppm",
          Connection: "WiFi/USB",
          Memory: "128MB",
        },
      },
      {
        name: 'M√†n H√¨nh Dell 24" FHD',
        description:
          "M√†n h√¨nh 24 inch Full HD, IPS panel, 60Hz, VESA mount, thi·∫øt k·∫ø m·ªèng",
        price: 4500000,
        image:
          "https://images.unsplash.com/photo-1593640408182-31c70c8268f5?w=800&h=600&fit=crop",
        specs: {
          Size: "24 inch",
          Resolution: "1920x1080",
          Panel: "IPS",
          Refresh: "60Hz",
        },
      },
      {
        name: "M√°y Scan Canon CanoScan",
        description:
          "M√°y qu√©t t√†i li·ªáu, ƒë·ªô ph√¢n gi·∫£i 4800dpi, A4 size, USB connection",
        price: 2800000,
        image:
          "https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=800&h=600&fit=crop",
        specs: {
          Resolution: "4800dpi",
          Size: "A4",
          Connection: "USB",
          Type: "Flatbed",
        },
      },
      {
        name: "M√°y Chi·∫øu Epson Home Cinema",
        description:
          "M√°y chi·∫øu Full HD, ƒë·ªô s√°ng 3000 lumens, k·∫øt n·ªëi HDMI, √¢m thanh t√≠ch h·ª£p",
        price: 8500000,
        image:
          "https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=800&h=600&fit=crop",
        specs: {
          Resolution: "1920x1080",
          Brightness: "3000 lumens",
          Connection: "HDMI",
          Audio: "Built-in",
        },
      },
      {
        name: "B√†n V·∫Ω Wacom Intuos",
        description:
          "B√†n v·∫Ω ƒë·ªì h·ªça, ƒë·ªô nh·∫°y 4096 levels, k√≠ch th∆∞·ªõc A4, USB connection",
        price: 3200000,
        image:
          "https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=800&h=600&fit=crop",
        specs: {
          Pressure: "4096 levels",
          Size: "A4",
          Connection: "USB",
          Compatibility: "Windows/Mac",
        },
      },
    ],
    "Thi·∫øt B·ªã M·∫°ng": [
      {
        name: "Router WiFi TP-Link Archer",
        description:
          "Router WiFi 6, t·ªëc ƒë·ªô 3000Mbps, 4 anten, b·∫£o m·∫≠t WPA3, dual-band",
        price: 1800000,
        image:
          "https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=800&h=600&fit=crop",
        specs: {
          Standard: "WiFi 6",
          Speed: "3000Mbps",
          Antennas: "4",
          Security: "WPA3",
        },
      },
      {
        name: "Switch Cisco 8-Port",
        description:
          "Switch m·∫°ng 8 c·ªïng Gigabit, unmanaged, plug-and-play, LED indicators",
        price: 1200000,
        image:
          "https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=800&h=600&fit=crop",
        specs: {
          Ports: "8 Gigabit",
          Type: "Unmanaged",
          Speed: "1Gbps",
          Power: "PoE",
        },
      },
      {
        name: "Modem VNPT Fiber",
        description: "Modem c√°p quang VNPT, WiFi 5, 4 c·ªïng LAN, h·ªó tr·ª£ IPv6",
        price: 800000,
        image:
          "https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=800&h=600&fit=crop",
        specs: {
          Type: "Fiber",
          WiFi: "WiFi 5",
          LAN: "4 ports",
          Protocol: "IPv6",
        },
      },
      {
        name: "Access Point Ubiquiti UniFi",
        description:
          "Access Point WiFi 6, 4x4 MIMO, PoE powered, cloud management",
        price: 2500000,
        image:
          "https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=800&h=600&fit=crop",
        specs: {
          Standard: "WiFi 6",
          MIMO: "4x4",
          Power: "PoE",
          Management: "Cloud",
        },
      },
      {
        name: "C√°p M·∫°ng Cat6 100m",
        description:
          "C√°p m·∫°ng Cat6, 100m, shielded, t∆∞∆°ng th√≠ch Gigabit Ethernet",
        price: 350000,
        image:
          "https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=800&h=600&fit=crop",
        specs: {
          Category: "Cat6",
          Length: "100m",
          Shielding: "Shielded",
          Speed: "1Gbps",
        },
      },
    ],
    "L∆∞u Tr·ªØ & Backup": [
      {
        name: "·ªî C·ª©ng SSD Samsung 1TB",
        description:
          "·ªî c·ª©ng SSD Samsung 1TB, t·ªëc ƒë·ªô ƒë·ªçc 3500MB/s, SATA III, 5 nƒÉm b·∫£o h√†nh",
        price: 1800000,
        image:
          "https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=800&h=600&fit=crop",
        specs: {
          Capacity: "1TB",
          Interface: "SATA III",
          Speed: "3500MB/s",
          Warranty: "5 years",
        },
      },
      {
        name: "USB Kingston 64GB",
        description:
          "USB 3.0 Kingston 64GB, t·ªëc ƒë·ªô ƒë·ªçc 100MB/s, thi·∫øt k·∫ø nh·ªè g·ªçn",
        price: 250000,
        image:
          "https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=800&h=600&fit=crop",
        specs: {
          Capacity: "64GB",
          Interface: "USB 3.0",
          Speed: "100MB/s",
          Size: "Compact",
        },
      },
      {
        name: "Th·∫ª Nh·ªõ SanDisk 128GB",
        description:
          "Th·∫ª nh·ªõ microSD SanDisk 128GB, Class 10, UHS-I, t∆∞∆°ng th√≠ch ƒëa thi·∫øt b·ªã",
        price: 180000,
        image:
          "https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=800&h=600&fit=crop",
        specs: {
          Capacity: "128GB",
          Class: "Class 10",
          Standard: "UHS-I",
          Compatibility: "Multi-device",
        },
      },
      {
        name: "NAS Synology 2-Bay",
        description:
          "NAS Synology 2-bay, RAID support, 2GB RAM, dual Gigabit LAN",
        price: 4500000,
        image:
          "https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=800&h=600&fit=crop",
        specs: {
          Bays: "2",
          RAID: "Supported",
          RAM: "2GB",
          LAN: "Dual Gigabit",
        },
      },
      {
        name: "·ªî C·ª©ng Ngo√†i WD 2TB",
        description:
          "·ªî c·ª©ng ngo√†i Western Digital 2TB, USB 3.0, thi·∫øt k·∫ø portable",
        price: 1200000,
        image:
          "https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=800&h=600&fit=crop",
        specs: {
          Capacity: "2TB",
          Interface: "USB 3.0",
          Type: "Portable",
          Brand: "Western Digital",
        },
      },
    ],
    "Ph·∫ßn M·ªÅm & B·∫£n Quy·ªÅn": [
      {
        name: "Windows 11 Pro",
        description:
          "Windows 11 Pro b·∫£n quy·ªÅn, h·ªó tr·ª£ 64-bit, kh√¥ng gi·ªõi h·∫°n thi·∫øt b·ªã",
        price: 2500000,
        image:
          "https://images.unsplash.com/photo-1496181133206-80ce9b88a853?w=800&h=600&fit=crop",
        specs: {
          Version: "Windows 11 Pro",
          Architecture: "64-bit",
          License: "Perpetual",
          Support: "Unlimited",
        },
      },
      {
        name: "Microsoft Office 365",
        description:
          "Microsoft Office 365 Personal, 1TB OneDrive, 5 thi·∫øt b·ªã, 1 nƒÉm",
        price: 1200000,
        image:
          "https://images.unsplash.com/photo-1496181133206-80ce9b88a853?w=800&h=600&fit=crop",
        specs: {
          Plan: "Personal",
          Storage: "1TB OneDrive",
          Devices: "5",
          Duration: "1 year",
        },
      },
      {
        name: "Adobe Creative Cloud",
        description:
          "Adobe Creative Cloud All Apps, Photoshop, Illustrator, Premiere Pro",
        price: 1800000,
        image:
          "https://images.unsplash.com/photo-1496181133206-80ce9b88a853?w=800&h=600&fit=crop",
        specs: {
          Apps: "All Apps",
          Storage: "100GB",
          Duration: "1 year",
          Updates: "Included",
        },
      },
      {
        name: "Kaspersky Internet Security",
        description:
          "Kaspersky Internet Security 3 thi·∫øt b·ªã, b·∫£o v·ªá real-time, 1 nƒÉm",
        price: 800000,
        image:
          "https://images.unsplash.com/photo-1496181133206-80ce9b88a853?w=800&h=600&fit=crop",
        specs: {
          Devices: "3",
          Protection: "Real-time",
          Duration: "1 year",
          Features: "Full suite",
        },
      },
      {
        name: "AutoCAD 2024",
        description: "AutoCAD 2024 b·∫£n quy·ªÅn, thi·∫øt k·∫ø 2D/3D, h·ªó tr·ª£ k·ªπ thu·∫≠t",
        price: 3500000,
        image:
          "https://images.unsplash.com/photo-1496181133206-80ce9b88a853?w=800&h=600&fit=crop",
        specs: {
          Version: "2024",
          Type: "2D/3D CAD",
          License: "Perpetual",
          Support: "Technical",
        },
      },
    ],
    "D·ªãch V·ª• C√¥ng Ngh·ªá": [
      {
        name: "D·ªãch V·ª• S·ª≠a Ch·ªØa M√°y T√≠nh",
        description:
          "D·ªãch v·ª• s·ª≠a ch·ªØa m√°y t√≠nh, laptop, PC chuy√™n nghi·ªáp t·∫°i nh√†",
        price: 500000,
        image:
          "https://images.unsplash.com/photo-1593640408182-31c70c8268f5?w=800&h=600&fit=crop",
        specs: {
          Service: "Repair",
          Location: "On-site",
          Warranty: "3 months",
          Response: "24h",
        },
      },
      {
        name: "D·ªãch V·ª• N√¢ng C·∫•p RAM",
        description:
          "D·ªãch v·ª• n√¢ng c·∫•p RAM cho laptop v√† m√°y t√≠nh ƒë·ªÉ b√†n, b·∫£o h√†nh ch√≠nh h√£ng",
        price: 300000,
        image:
          "https://images.unsplash.com/photo-1527864550417-7fd91fc51a46?w=800&h=600&fit=crop",
        specs: {
          Service: "RAM Upgrade",
          Warranty: "Genuine",
          Compatibility: "Checked",
          Installation: "Included",
        },
      },
      {
        name: "D·ªãch V·ª• Thay ·ªî C·ª©ng SSD",
        description:
          "D·ªãch v·ª• thay ·ªï c·ª©ng HDD sang SSD tƒÉng t·ªëc ƒë·ªô, clone d·ªØ li·ªáu",
        price: 800000,
        image:
          "https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=800&h=600&fit=crop",
        specs: {
          Service: "SSD Upgrade",
          Data: "Cloned",
          Warranty: "1 year",
          Speed: "Improved",
        },
      },
      {
        name: "D·ªãch V·ª• C√†i ƒê·∫∑t Ph·∫ßn M·ªÅm",
        description:
          "D·ªãch v·ª• c√†i ƒë·∫∑t Windows, Office v√† c√°c ph·∫ßn m·ªÅm kh√°c, t∆∞ v·∫•n mi·ªÖn ph√≠",
        price: 200000,
        image:
          "https://images.unsplash.com/photo-1496181133206-80ce9b88a853?w=800&h=600&fit=crop",
        specs: {
          Service: "Software Installation",
          Consultation: "Free",
          Support: "Remote",
          Duration: "1 day",
        },
      },
      {
        name: "D·ªãch V·ª• Kh√¥i Ph·ª•c D·ªØ Li·ªáu",
        description:
          "D·ªãch v·ª• kh√¥i ph·ª•c d·ªØ li·ªáu t·ª´ ·ªï c·ª©ng b·ªã h·ªèng, t·ª∑ l·ªá th√†nh c√¥ng cao",
        price: 1000000,
        image:
          "https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=800&h=600&fit=crop",
        specs: {
          Service: "Data Recovery",
          Success: "High rate",
          Equipment: "Professional",
          Report: "Detailed",
        },
      },
    ],
  };

  // T·∫°o s·∫£n ph·∫©m cho t·ª´ng nh√≥m th·ªÉ lo·∫°i
  Object.keys(productsByCategory).forEach((categoryName, categoryIndex) => {
    const categoryProducts = productsByCategory[categoryName];

    categoryProducts.forEach((product, productIndex) => {
      const now = new Date();
      const startDate = new Date(
        now.getTime() +
          (categoryIndex * 7 + productIndex * 2) * 24 * 60 * 60 * 1000
      );
      const endDate = new Date(startDate.getTime() + 30 * 24 * 60 * 60 * 1000);

      // T·∫°o danh s√°ch ·∫£nh ph·ª• cho m·ªói s·∫£n ph·∫©m
      const additionalImages = [
        "https://images.unsplash.com/photo-1496181133206-80ce9b88a853?w=800&h=600&fit=crop",
        "https://images.unsplash.com/photo-1549317661-bd32c8ce0db2?w=800&h=600&fit=crop",
        "https://images.unsplash.com/photo-1552519507-da3b142c6e3d?w=800&h=600&fit=crop",
        "https://images.unsplash.com/photo-1617814076367-b759c7d7e738?w=800&h=600&fit=crop",
        "https://images.unsplash.com/photo-1555215695-3004980ad54e?w=800&h=600&fit=crop",
        "https://images.unsplash.com/photo-1465101178521-c1a9136a3b99?w=800&h=600&fit=crop",
        "https://images.unsplash.com/photo-1593640408182-31c70c8268f5?w=800&h=600&fit=crop",
        "https://images.unsplash.com/photo-1587829741301-dc798b83add3?w=800&h=600&fit=crop",
        "https://images.unsplash.com/photo-1527864550417-7fd91fc51a46?w=800&h=600&fit=crop",
        "https://images.unsplash.com/photo-1505740420928-5e560c06d30e?w=800&h=600&fit=crop",
        "https://images.unsplash.com/photo-1545454675-3531b543be5d?w=800&h=600&fit=crop",
        "https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=800&h=600&fit=crop",
      ];

      // Ch·ªçn ng·∫´u nhi√™n 2-4 ·∫£nh ph·ª• cho m·ªói s·∫£n ph·∫©m
      const numAdditionalImages = Math.floor(Math.random() * 3) + 2; // 2-4 ·∫£nh
      const shuffledImages = [...additionalImages].sort(
        () => 0.5 - Math.random()
      );
      const selectedAdditionalImages = shuffledImages.slice(
        0,
        numAdditionalImages
      );

      products.push({
        Product_Name: product.name,
        Description: product.description,
        Price: product.price,
        Main_Image: product.image,
        List_Image: selectedAdditionalImages, // Th√™m danh s√°ch ·∫£nh ph·ª•
        Images: [product.image],

        Stock: Math.floor(Math.random() * 10) + 1,
        Specifications: product.specs,
        CategoryName: categoryName, // Th√™m t√™n category ƒë·ªÉ mapping sau n√†y
      });
    });
  });

  return products;
}

const sampleProducts = generateSampleProducts();

// Sample services data
const sampleServices = [
  {
    icon: "https://cdn-icons-png.flaticon.com/512/1995/1995515.png",
    title: "B·∫£o D∆∞·ª°ng ƒê·ªãnh K·ª≥",
    description:
      "Th·ª±c hi·ªán ki·ªÉm tra v√† b·∫£o d∆∞·ª°ng theo ƒë·ªãnh k·ª≥ ƒë·ªÉ ƒë·∫£m b·∫£o xe lu√¥n v·∫≠n h√†nh ·ªïn ƒë·ªãnh v√† an to√†n.",
  },
  {
    icon: "https://cdn-icons-png.flaticon.com/512/1995/1995516.png",
    title: "S·ª≠a Ch·ªØa & ƒê·ªìng S∆°n",
    description:
      "Kh·∫Øc ph·ª•c c√°c h∆∞ h·ªèng, l√†m m·ªõi ngo·∫°i h√¨nh xe v·ªõi quy tr√¨nh s·ª≠a ch·ªØa v√† s∆°n ti√™u chu·∫©n Minh Duy.",
  },
  {
    icon: "https://cdn-icons-png.flaticon.com/512/1995/1995517.png",
    title: "N√¢ng C·∫•p Hi·ªáu Su·∫•t",
    description:
      "C·∫£i thi·ªán s·ª©c m·∫°nh v√† kh·∫£ nƒÉng v·∫≠n h√†nh c·ªßa xe v·ªõi c√°c g√≥i n√¢ng c·∫•p ch√≠nh h√£ng.",
  },
  {
    icon: "https://cdn-icons-png.flaticon.com/512/1995/1995518.png",
    title: "Thay D·∫ßu & L·ªçc",
    description:
      "Thay d·∫ßu ƒë·ªông c∆° v√† b·ªô l·ªçc theo ti√™u chu·∫©n Minh Duy ƒë·ªÉ ƒë·∫£m b·∫£o hi·ªáu su·∫•t t·ªëi ∆∞u.",
  },
  {
    icon: "https://cdn-icons-png.flaticon.com/512/1995/1995519.png",
    title: "Ki·ªÉm Tra ƒêi·ªán T·ª≠",
    description:
      "Ch·∫©n ƒëo√°n v√† s·ª≠a ch·ªØa c√°c v·∫•n ƒë·ªÅ ƒëi·ªán t·ª≠, h·ªá th·ªëng ƒëi·ªÅu khi·ªÉn v·ªõi thi·∫øt b·ªã chuy√™n d·ª•ng.",
  },
  {
    icon: "https://cdn-icons-png.flaticon.com/512/1995/1995520.png",
    title: "B·∫£o D∆∞·ª°ng Phanh",
    description:
      "Ki·ªÉm tra, b·∫£o d∆∞·ª°ng v√† thay th·∫ø h·ªá th·ªëng phanh ƒë·ªÉ ƒë·∫£m b·∫£o an to√†n t·ªëi ƒëa.",
  },
  {
    icon: "https://cdn-icons-png.flaticon.com/512/1995/1995521.png",
    title: "L·∫Øp ƒê·∫∑t Ph·ª• Ki·ªán",
    description:
      "L·∫Øp ƒë·∫∑t c√°c ph·ª• ki·ªán ch√≠nh h√£ng Minh Duy v·ªõi b·∫£o h√†nh v√† d·ªãch v·ª• h·∫≠u m√£i.",
  },
  {
    icon: "https://cdn-icons-png.flaticon.com/512/1995/1995522.png",
    title: "T∆∞ V·∫•n K·ªπ Thu·∫≠t",
    description:
      "T∆∞ v·∫•n chuy√™n s√¢u v·ªÅ k·ªπ thu·∫≠t, b·∫£o d∆∞·ª°ng v√† n√¢ng c·∫•p xe v·ªõi ƒë·ªôi ng≈© chuy√™n gia.",
  },
  {
    icon: "https://cdn-icons-png.flaticon.com/512/1995/1995523.png",
    title: "D·ªãch V·ª• Kh·∫©n C·∫•p",
    description:
      "D·ªãch v·ª• c·ª©u h·ªô v√† s·ª≠a ch·ªØa kh·∫©n c·∫•p 24/7 cho c√°c tr∆∞·ªùng h·ª£p c·∫ßn thi·∫øt.",
  },
];

// Sample pricing data
const samplePricing = [
  {
    title: "L·∫Øp ƒë·∫∑t Camera Gi√°m S√°t",
    description:
      "H·ªá th·ªëng camera gi√°m s√°t chuy√™n nghi·ªáp v·ªõi c√¥ng ngh·ªá HD/4K, h·ªó tr·ª£ xem t·ª´ xa qua ƒëi·ªán tho·∫°i.",
    features: [
      "Camera HD/4K ch·∫•t l∆∞·ª£ng cao",
      "H·ªá th·ªëng l∆∞u tr·ªØ NAS/Cloud",
      "Xem t·ª´ xa qua mobile app",
      "Ph√°t hi·ªán chuy·ªÉn ƒë·ªông th√¥ng minh",
      "B·∫£o h√†nh 2 nƒÉm",
      "H·ªó tr·ª£ k·ªπ thu·∫≠t 24/7",
    ],
    documents: [
      { name: "B√°o gi√° Camera Gi√°m S√°t", type: "pdf", size: "1.8MB", url: "#" },
      { name: "Catalog Camera 2024", type: "word", size: "1.2MB", url: "#" },
      { name: "B·∫£ng gi√° chi ti·∫øt", type: "excel", size: "2.1MB", url: "#" },
    ],
    color: "indigo",
  },
  {
    title: "L·∫Øp ƒë·∫∑t Server & Network",
    description:
      "Thi·∫øt k·∫ø v√† l·∫Øp ƒë·∫∑t h·ªá th·ªëng server, m·∫°ng LAN/WAN cho doanh nghi·ªáp v·ª´a v√† nh·ªè.",
    features: [
      "Server Dell/HP ch√≠nh h√£ng",
      "Switch Cisco/Huawei",
      "H·ªá th·ªëng backup t·ª± ƒë·ªông",
      "B·∫£o m·∫≠t firewall",
      "B·∫£o h√†nh 3 nƒÉm",
      "T∆∞ v·∫•n k·ªπ thu·∫≠t mi·ªÖn ph√≠",
    ],
    documents: [
      {
        name: "B√°o gi√° Server & Network",
        type: "pdf",
        size: "2.5MB",
        url: "#",
      },
      { name: "Th√¥ng s·ªë k·ªπ thu·∫≠t", type: "word", size: "1.8MB", url: "#" },
    ],
    color: "emerald",
  },
  {
    title: "Ph·∫ßn M·ªÅm Qu·∫£n L√Ω",
    description:
      "Ph√°t tri·ªÉn ph·∫ßn m·ªÅm qu·∫£n l√Ω theo y√™u c·∫ßu, t√≠ch h·ª£p v·ªõi h·ªá th·ªëng hi·ªán c√≥.",
    features: [
      "Ph√°t tri·ªÉn theo y√™u c·∫ßu",
      "Giao di·ªán responsive",
      "T√≠ch h·ª£p API",
      "B·∫£o m·∫≠t d·ªØ li·ªáu",
      "H·ªó tr·ª£ ƒë√†o t·∫°o",
      "B·∫£o tr√¨ d√†i h·∫°n",
    ],
    documents: [
      { name: "B√°o gi√° Ph·∫ßn M·ªÅm", type: "pdf", size: "2.2MB", url: "#" },
      { name: "Demo s·∫£n ph·∫©m", type: "word", size: "1.5MB", url: "#" },
      { name: "Timeline d·ª± √°n", type: "excel", size: "1.8MB", url: "#" },
    ],
    color: "violet",
  },
  {
    title: "B·∫£o Tr√¨ H·ªá Th·ªëng",
    description:
      "D·ªãch v·ª• b·∫£o tr√¨, b·∫£o d∆∞·ª°ng h·ªá th·ªëng IT ƒë·ªãnh k·ª≥, ƒë·∫£m b·∫£o ho·∫°t ƒë·ªông ·ªïn ƒë·ªãnh.",
    features: [
      "Ki·ªÉm tra ƒë·ªãnh k·ª≥ h√†ng th√°ng",
      "C·∫≠p nh·∫≠t b·∫£o m·∫≠t",
      "Sao l∆∞u d·ªØ li·ªáu",
      "Thay th·∫ø linh ki·ªán",
      "B√°o c√°o chi ti·∫øt",
      "H·ªó tr·ª£ kh·∫©n c·∫•p",
    ],
    documents: [
      { name: "B√°o gi√° B·∫£o Tr√¨", type: "pdf", size: "1.6MB", url: "#" },
      { name: "Quy tr√¨nh b·∫£o tr√¨", type: "word", size: "1.1MB", url: "#" },
      { name: "L·ªãch b·∫£o tr√¨", type: "excel", size: "1.3MB", url: "#" },
    ],
    color: "amber",
  },
  {
    title: "Thi·∫øt K·∫ø Website",
    description:
      "Thi·∫øt k·∫ø website chuy√™n nghi·ªáp, responsive, t·ªëi ∆∞u SEO v√† t·ªëc ƒë·ªô t·∫£i trang.",
    features: [
      "Thi·∫øt k·∫ø responsive",
      "T·ªëi ∆∞u SEO",
      "T√≠ch h·ª£p CMS",
      "B·∫£o m·∫≠t SSL",
      "T·ªëc ƒë·ªô t·∫£i nhanh",
      "H·ªó tr·ª£ ƒëa ng√¥n ng·ªØ",
    ],
    documents: [
      { name: "B√°o gi√° Website", type: "pdf", size: "1.9MB", url: "#" },
      { name: "Portfolio m·∫´u", type: "word", size: "2.3MB", url: "#" },
    ],
    color: "sky",
  },
  {
    title: "Cloud & Backup",
    description:
      "Gi·∫£i ph√°p l∆∞u tr·ªØ ƒë√°m m√¢y v√† sao l∆∞u d·ªØ li·ªáu an to√†n, ti·∫øt ki·ªám chi ph√≠.",
    features: [
      "L∆∞u tr·ªØ ƒë√°m m√¢y AWS/Azure",
      "Sao l∆∞u t·ª± ƒë·ªông",
      "Kh√¥i ph·ª•c d·ªØ li·ªáu",
      "B·∫£o m·∫≠t m√£ h√≥a",
      "Qu·∫£n l√Ω truy c·∫≠p",
      "Monitoring 24/7",
    ],
    documents: [
      { name: "B√°o gi√° Cloud", type: "pdf", size: "2.0MB", url: "#" },
      { name: "So s√°nh d·ªãch v·ª•", type: "word", size: "1.7MB", url: "#" },
      { name: "Chi ph√≠ v·∫≠n h√†nh", type: "excel", size: "2.4MB", url: "#" },
    ],
    color: "rose",
  },
  {
    title: "T∆∞ V·∫•n IT",
    description:
      "D·ªãch v·ª• t∆∞ v·∫•n c√¥ng ngh·ªá th√¥ng tin, ƒë√°nh gi√° v√† ƒë·ªÅ xu·∫•t gi·∫£i ph√°p t·ªëi ∆∞u.",
    features: [
      "ƒê√°nh gi√° hi·ªán tr·∫°ng",
      "ƒê·ªÅ xu·∫•t gi·∫£i ph√°p",
      "L·∫≠p k·∫ø ho·∫°ch tri·ªÉn khai",
      "T√≠nh to√°n ROI",
      "H·ªó tr·ª£ l·ª±a ch·ªçn c√¥ng ngh·ªá",
      "Theo d√µi d·ª± √°n",
    ],
    documents: [
      { name: "B√°o gi√° T∆∞ V·∫•n", type: "pdf", size: "1.5MB", url: "#" },
      { name: "Quy tr√¨nh t∆∞ v·∫•n", type: "word", size: "1.0MB", url: "#" },
      { name: "Case study", type: "excel", size: "1.9MB", url: "#" },
    ],
    color: "lime",
  },
  {
    title: "B·∫£o M·∫≠t H·ªá Th·ªëng",
    description:
      "Gi·∫£i ph√°p b·∫£o m·∫≠t to√†n di·ªán cho h·ªá th·ªëng IT, b·∫£o v·ªá d·ªØ li·ªáu kh·ªèi c√°c m·ªëi ƒëe d·ªça.",
    features: [
      "Firewall chuy√™n nghi·ªáp",
      "Antivirus doanh nghi·ªáp",
      "Ph√°t hi·ªán x√¢m nh·∫≠p",
      "M√£ h√≥a d·ªØ li·ªáu",
      "Ki·ªÉm tra b·∫£o m·∫≠t",
      "ƒê√†o t·∫°o nh√¢n vi√™n",
    ],
    documents: [
      { name: "B√°o gi√° B·∫£o M·∫≠t", type: "pdf", size: "2.1MB", url: "#" },
      { name: "Quy tr√¨nh b·∫£o m·∫≠t", type: "word", size: "1.4MB", url: "#" },
    ],
    color: "cyan",
  },
];

// Sample news events data
const sampleNewsEvents = [
  {
    Title: "Minh Duy t·ªï ch·ª©c workshop b·∫£o tr√¨ m√°y t√≠nh",
    Content:
      "Workshop b·∫£o tr√¨ m√°y t√≠nh mi·ªÖn ph√≠ d√†nh cho kh√°ch h√†ng v·ªõi c√°c chuy√™n gia k·ªπ thu·∫≠t.",
    PublishDate: new Date("2024-09-01"),
    ImageUrl:
      "https://images.unsplash.com/photo-1527864550417-7fd91fc51a46?w=800&h=600&fit=crop",
    Status: NEWS_STATUS.PUBLISHED,
  },
  {
    Title: "Minh Duy gi·ªõi thi·ªáu ·ª©ng d·ª•ng qu·∫£n l√Ω thi·∫øt b·ªã",
    Content:
      "·ª®ng d·ª•ng Minh Duy Device Manager m·ªõi v·ªõi nhi·ªÅu t√≠nh nƒÉng qu·∫£n l√Ω thi·∫øt b·ªã thu√™.",
    PublishDate: new Date("2024-09-15"),
    ImageUrl:
      "https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=800&h=600&fit=crop",
    Status: NEWS_STATUS.PUBLISHED,
  },
  {
    Title: "Minh Duy t·ªï ch·ª©c s·ª± ki·ªán c√¥ng ngh·ªá gia ƒë√¨nh",
    Content:
      "Ng√†y h·ªôi c√¥ng ngh·ªá gia ƒë√¨nh v·ªõi nhi·ªÅu ho·∫°t ƒë·ªông tr·∫£i nghi·ªám thi·∫øt b·ªã d√†nh cho kh√°ch h√†ng v√† ng∆∞·ªùi th√¢n.",
    PublishDate: new Date("2024-08-10"),
    ImageUrl:
      "https://images.unsplash.com/photo-1496181133206-80ce9b88a853?w=800&h=600&fit=crop",
    Status: NEWS_STATUS.PUBLISHED,
  },
  {
    Title: "Minh Duy khai tr∆∞∆°ng trung t√¢m d·ªãch v·ª• m·ªõi t·∫°i H√† N·ªôi",
    Content:
      "Trung t√¢m d·ªãch v·ª• Minh Duy t·∫°i H√† N·ªôi cung c·∫•p ƒë·∫ßy ƒë·ªß c√°c d·ªãch v·ª• s·ª≠a ch·ªØa, b·∫£o h√†nh v√† h·ªó tr·ª£ k·ªπ thu·∫≠t.",
    PublishDate: new Date("2024-08-20"),
    ImageUrl:
      "https://images.unsplash.com/photo-1593640408182-31c70c8268f5?w=800&h=600&fit=crop",
    Status: NEWS_STATUS.PUBLISHED,
  },
  {
    Title: "Minh Duy ra m·∫Øt d·ªãch v·ª• thu√™ MacBook cao c·∫•p",
    Content:
      "D·ªãch v·ª• thu√™ MacBook cao c·∫•p v·ªõi ƒë·∫ßy ƒë·ªß phi√™n b·∫£n M1, M2 v·ª´a ƒë∆∞·ª£c gi·ªõi thi·ªáu t·∫°i Vi·ªát Nam.",
    PublishDate: new Date("2024-09-01"),
    ImageUrl:
      "https://images.unsplash.com/photo-1465101178521-c1a9136a3b99?w=800&h=600&fit=crop",
    Status: NEWS_STATUS.DRAFT,
  },
  {
    Title: "Minh Duy t·ªï ch·ª©c workshop b·∫£o m·∫≠t d·ªØ li·ªáu mi·ªÖn ph√≠",
    Content:
      "Kh√°ch h√†ng Minh Duy ƒë∆∞·ª£c tham gia workshop b·∫£o m·∫≠t d·ªØ li·ªáu mi·ªÖn ph√≠ v·ªõi c√°c chuy√™n gia b·∫£o m·∫≠t h√†ng ƒë·∫ßu.",
    PublishDate: new Date("2024-09-10"),
    ImageUrl:
      "https://images.unsplash.com/photo-1527864550417-7fd91fc51a46?w=800&h=600&fit=crop",
    Status: NEWS_STATUS.LOCKED,
  },
];

// Sample service types data
const sampleServiceTypes = [
  {
    name: "S·ª≠a ch·ªØa",
    description: "D·ªãch v·ª• s·ª≠a ch·ªØa m√°y t√≠nh, laptop, thi·∫øt b·ªã ƒëi·ªán t·ª≠",
  },
  {
    name: "L·∫Øp ƒë·∫∑t",
    description: "D·ªãch v·ª• l·∫Øp ƒë·∫∑t h·ªá th·ªëng m·∫°ng, camera, thi·∫øt b·ªã",
  },
  {
    name: "Thi c√¥ng",
    description: "D·ªãch v·ª• thi c√¥ng h·ªá th·ªëng c√¥ng ngh·ªá th√¥ng tin",
  },
  {
    name: "B·∫£o tr√¨",
    description: "D·ªãch v·ª• b·∫£o tr√¨ ƒë·ªãnh k·ª≥ h·ªá th·ªëng",
  },
  {
    name: "N√¢ng c·∫•p",
    description: "D·ªãch v·ª• n√¢ng c·∫•p ph·∫ßn c·ª©ng v√† ph·∫ßn m·ªÅm",
  },
];

// Sample booking data (renamed fields) - reference by serviceTypeName, later mapped to ObjectId
const sampleBookings = [
  {
    FullName: "Nguy·ªÖn VƒÉn An",
    Email: "nguyenvanan@email.com",
    Phone: "0901234567",
    Address: "123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM",
    serviceTypeName: "S·ª≠a ch·ªØa",
    BookingDate: new Date("2024-12-20"),
    BookingTime: "09:00",
    Notes: "C·∫ßn s·ª≠a ch·ªØa m√°y t√≠nh b√†n",
    Status: "pending",
  },
  {
    FullName: "Tr·∫ßn Th·ªã B√¨nh",
    Email: "tranthibinh@email.com",
    Phone: "0912345678",
    Address: "456 ƒê∆∞·ªùng XYZ, Qu·∫≠n 3, TP.HCM",
    serviceTypeName: "L·∫Øp ƒë·∫∑t",
    BookingDate: new Date("2024-12-21"),
    BookingTime: "14:00",
    Notes: "L·∫Øp ƒë·∫∑t h·ªá th·ªëng m·∫°ng cho vƒÉn ph√≤ng",
    Status: "confirmed",
  },
  {
    FullName: "L√™ VƒÉn C∆∞·ªùng",
    Email: "levancuong@email.com",
    Phone: "0923456789",
    Address: "789 ƒê∆∞·ªùng DEF, Qu·∫≠n 5, TP.HCM",
    serviceTypeName: "Thi c√¥ng",
    BookingDate: new Date("2024-12-22"),
    BookingTime: "10:00",
    Notes: "Thi c√¥ng h·ªá th·ªëng camera gi√°m s√°t",
    Status: "completed",
  },
  {
    FullName: "Ph·∫°m Th·ªã Dung",
    Email: "phamthidung@email.com",
    Phone: "0934567890",
    Address: "321 ƒê∆∞·ªùng GHI, Qu·∫≠n 7, TP.HCM",
    serviceTypeName: "S·ª≠a ch·ªØa",
    BookingDate: new Date("2024-12-23"),
    BookingTime: "16:00",
    Notes: "S·ª≠a ch·ªØa laptop b·ªã h·ªèng m√†n h√¨nh",
    Status: "pending",
  },
  {
    FullName: "Ho√†ng VƒÉn Em",
    Email: "hoangvanem@email.com",
    Phone: "0945678901",
    Address: "654 ƒê∆∞·ªùng JKL, Qu·∫≠n 10, TP.HCM",
    serviceTypeName: "L·∫Øp ƒë·∫∑t",
    BookingDate: new Date("2024-12-24"),
    BookingTime: "11:00",
    Notes: "L·∫Øp ƒë·∫∑t m√°y in v√† m√°y scan cho c√¥ng ty",
    Status: "confirmed",
  },
];

// Migration function
async function migrate() {
  try {
    // Ki·ªÉm tra environment variables
    if (!process.env.MONGO_URI) {
      console.error("‚ùå MONGO_URI ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh");
      return;
    }

    // Retry logic cho k·∫øt n·ªëi MongoDB
    let connected = false;
    const maxRetries = 5;
    const retryDelay = 5000;

    for (let i = 0; i < maxRetries; i++) {
      try {
        await mongoose.connect(process.env.MONGO_URI, {
          useNewUrlParser: true,
          useUnifiedTopology: true,
          serverSelectionTimeoutMS: 10000,
          socketTimeoutMS: 45000,
        });
        connected = true;
        break;
      } catch (error) {
        console.error(
          `‚ùå L·ªói k·∫øt n·ªëi MongoDB l·∫ßn ${i + 1}/${maxRetries}:`,
          error.message
        );
        if (i === maxRetries - 1) {
          console.error("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi MongoDB sau nhi·ªÅu l·∫ßn th·ª≠");
          console.error("üîç Chi ti·∫øt l·ªói:", error);
          return;
        }
        await new Promise((resolve) => setTimeout(resolve, retryDelay));
      }
    }

    if (!connected) {
      console.error("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi MongoDB");
      return;
    }

    const forceReset = process.argv.includes("--force");
    const seededCounts = {
      roles: 0,
      users: 0,
      groupCategories: 0,
      subCategories: 0,
      products: 0,
      services: 0,
      newsEvents: 0,
      pricing: 0,
      locations: 0,
      slides: 0,
      serviceTypes: 0,
      bookings: 0,
    };

    if (forceReset) {
      console.log("[MIGRATE] --force detected ‚Üí clearing collections...");
      // Clear existing data
      await User.deleteMany({});
      await Role.deleteMany({});
      await RoleUser.deleteMany({});
      await Product.deleteMany({});
      await Category.deleteMany({});
      await Service.deleteMany({});
      await NewsEvent.deleteMany({});
      await Setting.deleteMany({});
      await Location.deleteMany({});
      await Booking.deleteMany({});
      console.log("[MIGRATE] Collections cleared.");
    }

    // Ki·ªÉm tra xem d·ªØ li·ªáu ƒë√£ t·ªìn t·∫°i ch∆∞a
    const existingRoles = await Role.countDocuments();
    const existingUsers = await User.countDocuments();
    const existingProducts = await Product.countDocuments();

    if (
      existingRoles > 0 &&
      existingUsers > 0 &&
      existingProducts > 0 &&
      !forceReset
    ) {
      return;
    }

    // Create roles only if they don't exist
    let createdRoles = [];
    if (existingRoles === 0) {
      createdRoles = await Role.insertMany(sampleRoles);
      seededCounts.roles = createdRoles.length;
      console.log(`[MIGRATE] Seeded roles: ${seededCounts.roles}`);
    } else {
      createdRoles = await Role.find({});
    }

    const adminRole = createdRoles.find(
      (role) => role.Role_Name === USER_ROLES.ADMIN
    );
    const userRole = createdRoles.find(
      (role) => role.Role_Name === USER_ROLES.USER
    );
    const employeeRole = createdRoles.find(
      (role) => role.Role_Name === USER_ROLES.EMPLOYEE
    );

    // Create admin user only if it doesn't exist
    let adminUser = await User.findOne({ UserName: "admin" });
    if (!adminUser) {
      adminUser = new User({
        UserName: "admin",
        Password: "admin123",
        Email: "admin@minhduy.com",
        Phone: "0123456789",
        FullName: "Administrator",
        Address: "H√† N·ªôi, Vi·ªát Nam",
        Role: USER_ROLES.ADMIN,
        LoginProvider: LOGIN_PROVIDERS.LOCAL,
      });
      await adminUser.save();
    } else {
    }

    // Create role-user relationship for admin only if it doesn't exist
    const existingAdminRoleUser = await RoleUser.findOne({
      UserID: adminUser._id,
      RoleID: adminRole._id,
    });
    if (!existingAdminRoleUser) {
      await RoleUser.create({
        UserID: adminUser._id,
        RoleID: adminRole._id,
      });
    } else {
    }

    // Create group categories only if they don't exist
    let createdGroupCategories = [];
    const existingGroupCategories = await Category.countDocuments({
      ParentID: null,
    });
    if (existingGroupCategories === 0) {
      createdGroupCategories = await Category.insertMany(sampleGroupCategories);
      seededCounts.groupCategories = createdGroupCategories.length;
      console.log(
        `[MIGRATE] Seeded group categories: ${seededCounts.groupCategories}`
      );
    } else {
      createdGroupCategories = await Category.find({ ParentID: null });
    }

    // Create sub categories with proper ParentID mapping
    let createdSubCategories = [];
    const existingSubCategories = await Category.countDocuments({
      ParentID: { $ne: null },
    });
    // Force t·∫°o l·∫°i sub-categories n·∫øu c√≥ --force flag
    if (existingSubCategories === 0 || forceReset) {
      // ƒê·ªãnh nghƒ©a sub-categories cho t·ª´ng nh√≥m th·ªÉ lo·∫°i
      const subCategoriesByGroup = {
        "Laptop & M√°y T√≠nh X√°ch Tay": [
          "Laptop VƒÉn Ph√≤ng",
          "Laptop Gaming",
          "Laptop ƒê·ªì H·ªça",
          "MacBook",
          "Laptop 2-in-1",
          "Laptop M·ªèng Nh·∫π",
          "Laptop Doanh Nghi·ªáp",
          "Laptop Sinh Vi√™n",
          "Laptop Cao C·∫•p",
          "Laptop Gi√° R·∫ª",
        ],
        "M√°y T√≠nh ƒê·ªÉ B√†n": [
          "PC Gaming",
          "PC VƒÉn Ph√≤ng",
          "PC ƒê·ªì H·ªça",
          "PC All-in-One",
          "PC Mini",
          "PC Workstation",
          "PC Server",
          "PC Home Theater",
          "PC Budget",
          "PC High-End",
        ],
        "Ph·ª• Ki·ªán M√°y T√≠nh": [
          "B√†n Ph√≠m",
          "Chu·ªôt",
          "Tai Nghe",
          "Loa",
          "Webcam",
          "Microphone",
          "Mousepad",
          "Headset Stand",
          "Cable Management",
          "Gaming Gear",
        ],
        "Thi·∫øt B·ªã Ngo·∫°i Vi": [
          "M√°y In",
          "M√†n H√¨nh",
          "M√°y Scan",
          "M√°y Chi·∫øu",
          "B√†n V·∫Ω",
          "M√°y Fax",
          "M√°y Photocopy",
          "M√°y ƒê·ªçc Th·∫ª",
          "M√°y ƒê·∫øm Ti·ªÅn",
          "Thi·∫øt B·ªã VƒÉn Ph√≤ng",
        ],
        "Thi·∫øt B·ªã M·∫°ng": [
          "Router WiFi",
          "Switch",
          "Modem",
          "Access Point",
          "C√°p M·∫°ng",
          "Card M·∫°ng",
          "Repeater",
          "Powerline",
          "Mesh WiFi",
          "Network Storage",
        ],
        "L∆∞u Tr·ªØ & Backup": [
          "·ªî C·ª©ng SSD",
          "·ªî C·ª©ng HDD",
          "USB Flash",
          "Th·∫ª Nh·ªõ",
          "NAS",
          "·ªî C·ª©ng Ngo√†i",
          "Cloud Storage",
          "Tape Backup",
          "RAID Controller",
          "Storage Enclosure",
        ],
        "Ph·∫ßn M·ªÅm & B·∫£n Quy·ªÅn": [
          "H·ªá ƒêi·ªÅu H√†nh",
          "Office Suite",
          "Ph·∫ßn M·ªÅm ƒê·ªì H·ªça",
          "Antivirus",
          "CAD Software",
          "Video Editing",
          "Audio Software",
          "Development Tools",
          "Business Software",
          "Educational Software",
        ],
        "D·ªãch V·ª• C√¥ng Ngh·ªá": [
          "S·ª≠a Ch·ªØa",
          "N√¢ng C·∫•p",
          "C√†i ƒê·∫∑t",
          "B·∫£o Tr√¨",
          "T∆∞ V·∫•n",
          "Kh√¥i Ph·ª•c D·ªØ Li·ªáu",
          "B·∫£o M·∫≠t",
          "Remote Support",
          "On-site Service",
          "Training",
        ],
      };

      const subCategoriesWithParent = [];

      createdGroupCategories.forEach((group) => {
        const subCategories = subCategoriesByGroup[group.Name] || [];

        subCategories.forEach((subName, index) => {
          subCategoriesWithParent.push({
            Name: subName,
            Description: `Sub-category ${subName} thu·ªôc ${group.Name}`,
            ParentID: group._id,
            Order: index + 1,
          });
        });
      });

      // X√≥a sub-categories c≈© n·∫øu force reset
      if (forceReset && existingSubCategories > 0) {
        await Category.deleteMany({ ParentID: { $ne: null } });
      }

      createdSubCategories = await Category.insertMany(subCategoriesWithParent);
      seededCounts.subCategories = createdSubCategories.length;
      console.log(
        `[MIGRATE] Seeded sub-categories: ${seededCounts.subCategories}`
      );
    } else {
      createdSubCategories = await Category.find({ ParentID: { $ne: null } });
    }

    // Create products only if they don't exist
    let dbProducts = [];
    if (existingProducts === 0) {
      // Mapping s·∫£n ph·∫©m v·ªõi sub-categories ph√π h·ª£p
      const productsWithCategories = [];

      // L·∫•y danh s√°ch sub-categories theo nh√≥m
      const subCategoriesByGroupName = {};
      createdSubCategories.forEach((subCat) => {
        const parentGroup = createdGroupCategories.find(
          (group) => group._id.toString() === subCat.ParentID.toString()
        );
        if (parentGroup) {
          if (!subCategoriesByGroupName[parentGroup.Name]) {
            subCategoriesByGroupName[parentGroup.Name] = [];
          }
          subCategoriesByGroupName[parentGroup.Name].push(subCat);
        }
      });

      sampleProducts.forEach((product) => {
        const groupName = product.CategoryName;
        const availableSubCategories =
          subCategoriesByGroupName[groupName] || [];

        if (availableSubCategories.length > 0) {
          // Ch·ªçn sub-category ph√π h·ª£p d·ª±a tr√™n t√™n s·∫£n ph·∫©m
          let selectedSubCategory = availableSubCategories[0]; // Default

          // Logic mapping d·ª±a tr√™n t√™n s·∫£n ph·∫©m
          const productName = product.Product_Name.toLowerCase();

          if (
            productName.includes("gaming") ||
            productName.includes("msi") ||
            productName.includes("razer")
          ) {
            selectedSubCategory =
              availableSubCategories.find((sub) =>
                sub.Name.includes("Gaming")
              ) || availableSubCategories[0];
          } else if (
            productName.includes("macbook") ||
            productName.includes("apple")
          ) {
            selectedSubCategory =
              availableSubCategories.find((sub) =>
                sub.Name.includes("MacBook")
              ) || availableSubCategories[0];
          } else if (
            productName.includes("office") ||
            productName.includes("business")
          ) {
            selectedSubCategory =
              availableSubCategories.find(
                (sub) =>
                  sub.Name.includes("VƒÉn Ph√≤ng") ||
                  sub.Name.includes("Doanh Nghi·ªáp")
              ) || availableSubCategories[0];
          } else if (
            productName.includes("keyboard") ||
            productName.includes("b√†n ph√≠m")
          ) {
            selectedSubCategory =
              availableSubCategories.find((sub) =>
                sub.Name.includes("B√†n Ph√≠m")
              ) || availableSubCategories[0];
          } else if (
            productName.includes("mouse") ||
            productName.includes("chu·ªôt")
          ) {
            selectedSubCategory =
              availableSubCategories.find((sub) =>
                sub.Name.includes("Chu·ªôt")
              ) || availableSubCategories[0];
          } else if (
            productName.includes("headset") ||
            productName.includes("tai nghe")
          ) {
            selectedSubCategory =
              availableSubCategories.find((sub) =>
                sub.Name.includes("Tai Nghe")
              ) || availableSubCategories[0];
          } else if (
            productName.includes("speaker") ||
            productName.includes("loa")
          ) {
            selectedSubCategory =
              availableSubCategories.find((sub) => sub.Name.includes("Loa")) ||
              availableSubCategories[0];
          } else if (
            productName.includes("printer") ||
            productName.includes("m√°y in")
          ) {
            selectedSubCategory =
              availableSubCategories.find((sub) =>
                sub.Name.includes("M√°y In")
              ) || availableSubCategories[0];
          } else if (
            productName.includes("monitor") ||
            productName.includes("m√†n h√¨nh")
          ) {
            selectedSubCategory =
              availableSubCategories.find((sub) =>
                sub.Name.includes("M√†n H√¨nh")
              ) || availableSubCategories[0];
          } else if (
            productName.includes("router") ||
            productName.includes("wifi")
          ) {
            selectedSubCategory =
              availableSubCategories.find((sub) =>
                sub.Name.includes("Router")
              ) || availableSubCategories[0];
          } else if (
            productName.includes("ssd") ||
            productName.includes("·ªï c·ª©ng")
          ) {
            selectedSubCategory =
              availableSubCategories.find(
                (sub) => sub.Name.includes("SSD") || sub.Name.includes("·ªî C·ª©ng")
              ) || availableSubCategories[0];
          } else if (
            productName.includes("windows") ||
            productName.includes("office")
          ) {
            selectedSubCategory =
              availableSubCategories.find(
                (sub) =>
                  sub.Name.includes("H·ªá ƒêi·ªÅu H√†nh") ||
                  sub.Name.includes("Office")
              ) || availableSubCategories[0];
          } else if (
            productName.includes("service") ||
            productName.includes("d·ªãch v·ª•")
          ) {
            selectedSubCategory =
              availableSubCategories.find(
                (sub) =>
                  sub.Name.includes("S·ª≠a Ch·ªØa") || sub.Name.includes("D·ªãch V·ª•")
              ) || availableSubCategories[0];
          }

          productsWithCategories.push({
            ...product,
            CategoryID: selectedSubCategory._id,
            List_Image: product.List_Image || [], // ƒê·∫£m b·∫£o List_Image ƒë∆∞·ª£c gi·ªØ l·∫°i
          });
        } else {
          // Fallback n·∫øu kh√¥ng t√¨m th·∫•y sub-category ph√π h·ª£p
          const randomSubCategory =
            createdSubCategories[
              Math.floor(Math.random() * createdSubCategories.length)
            ];
          productsWithCategories.push({
            ...product,
            CategoryID: randomSubCategory._id,
            List_Image: product.List_Image || [], // ƒê·∫£m b·∫£o List_Image ƒë∆∞·ª£c gi·ªØ l·∫°i
          });
        }
      });

      await Product.insertMany(productsWithCategories);
      seededCounts.products = productsWithCategories.length;
      console.log(`[MIGRATE] Seeded products: ${seededCounts.products}`);
    } else {
    }

    // L·∫•y l·∫°i danh s√°ch s·∫£n ph·∫©m t·ª´ DB
    dbProducts = await Product.find({});

    // Create services only if they don't exist
    const existingServices = await Service.countDocuments();
    if (existingServices === 0) {
      const svc = await Service.insertMany(sampleServices);
      seededCounts.services = svc.length;
      console.log(`[MIGRATE] Seeded services: ${seededCounts.services}`);
    } else {
    }

    // Create news events only if they don't exist
    const existingNewsEvents = await NewsEvent.countDocuments();
    if (existingNewsEvents === 0) {
      const ne = await NewsEvent.insertMany(sampleNewsEvents);
      seededCounts.newsEvents = ne.length;
      console.log(`[MIGRATE] Seeded news events: ${seededCounts.newsEvents}`);
    } else {
    }

    // Create users only if they don't exist
    let createdUsers = [];
    if (existingUsers === 0) {
      // T·∫°o t·ª´ng user m·ªôt ƒë·ªÉ trigger pre-save middleware (hash password)
      for (const userData of sampleUsers) {
        const user = new User(userData);
        await user.save();
        createdUsers.push(user);
      }
      seededCounts.users = createdUsers.length;
      console.log(`[MIGRATE] Seeded users: ${seededCounts.users}`);

      // Create role-user relationships for sample users
      for (const user of createdUsers) {
        let roleToAssign;
        if (user.Role === USER_ROLES.USER) {
          roleToAssign = userRole;
        } else if (user.Role === USER_ROLES.EMPLOYEE) {
          roleToAssign = employeeRole;
        }

        if (roleToAssign) {
          const existingRoleUser = await RoleUser.findOne({
            UserID: user._id,
            RoleID: roleToAssign._id,
          });

          if (!existingRoleUser) {
            await RoleUser.create({
              UserID: user._id,
              RoleID: roleToAssign._id,
            });
          }
        }
      }
    } else {
      createdUsers = await User.find({ UserName: { $ne: "admin" } });
    }

    // Create pricing data only if they don't exist
    const existingPricing = await Pricing.countDocuments();
    if (existingPricing === 0) {
      const pr = await Pricing.insertMany(samplePricing);
      seededCounts.pricing = pr.length;
      console.log(`[MIGRATE] Seeded pricing: ${seededCounts.pricing}`);
    } else {
    }

    // T·∫°o sample locations n·∫øu ch∆∞a c√≥
    const existingLocations = await Location.countDocuments();
    if (existingLocations === 0) {
      const loc = await Location.insertMany(sampleLocations);
      seededCounts.locations = loc.length;
      console.log(`[MIGRATE] Seeded locations: ${seededCounts.locations}`);
    } else {
    }

    // T·∫°o sample slides n·∫øu ch∆∞a c√≥
    const existingSlides = await Slide.countDocuments();
    if (existingSlides === 0) {
      const slides = await Slide.insertMany(sampleSlides);
      seededCounts.slides = slides.length;
      console.log(`[MIGRATE] Seeded slides: ${seededCounts.slides}`);
    } else {
    }

    // Create service types data only if they don't exist
    const existingServiceTypes = await ServiceType.countDocuments();
    if (existingServiceTypes === 0) {
      const st = await ServiceType.insertMany(sampleServiceTypes);
      seededCounts.serviceTypes = st.length;
      console.log(
        `[MIGRATE] Seeded service types: ${seededCounts.serviceTypes}`
      );
    } else {
    }

    // One-time migration: rename old fields if exist
    try {
      await Booking.updateMany([
        {
          $set: {
            BookingDate: { $ifNull: ["$BookingDate", "$TestDriveDate"] },
            BookingTime: { $ifNull: ["$BookingTime", "$TestDriveTime"] },
          },
        },
        { $unset: ["TestDriveDate", "TestDriveTime"] },
      ]);
    } catch (e) {
      // ignore if MongoDB version doesn't support pipeline updates
    }

    // Map CarModel text to ServiceTypes ObjectId when possible
    try {
      const allServiceTypes = await ServiceType.find({});
      const nameToId = new Map(allServiceTypes.map((s) => [s.name, s._id]));
      const docs = await Booking.find({
        ServiceTypes: { $exists: false },
        CarModel: { $exists: true },
      });
      for (const doc of docs) {
        const id = nameToId.get(doc.CarModel);
        if (id) {
          doc.ServiceTypes = id;
          doc.CarModel = undefined;
          await doc.save();
        }
      }
      // Cleanup leftover CarModel field if any
      await Booking.updateMany(
        { CarModel: { $exists: true } },
        { $unset: { CarModel: "" } }
      );
    } catch (e) {
      // best-effort migration
    }

    // Create booking data only if they don't exist
    const existingBookings = await Booking.countDocuments();
    if (existingBookings === 0) {
      const serviceTypesForSeed = await ServiceType.find({});
      const nameToIdForSeed = new Map(
        serviceTypesForSeed.map((s) => [s.name, s._id])
      );
      const fallbackId = serviceTypesForSeed[0]?._id || null;
      const sampleBookingsMapped = sampleBookings
        .map(({ serviceTypeName, ...rest }) => ({
          ...rest,
          ServiceTypes: nameToIdForSeed.get(serviceTypeName) || fallbackId,
        }))
        .filter((b) => !!b.ServiceTypes);

      if (sampleBookingsMapped.length > 0) {
        await Booking.insertMany(sampleBookingsMapped);
        seededCounts.bookings = sampleBookingsMapped.length;
        console.log(`[MIGRATE] Seeded bookings: ${seededCounts.bookings}`);
      }
    } else {
    }

    // T·∫°o/c·∫≠p nh·∫≠t settings m·∫´u
    const settingsData = {
      companyName: "Minh Duy",
      phone: "0123456333",
      email: "info@minhduy.com",
      workingHours: "08:00 - 18:00 (Th·ª© 2 - Th·ª© 7)",
      logo: "/images/logo.png",
      facebook: "https://www.facebook.com/minhduyqnam",
      youtube: "https://youtube.com",
      tiktok: "https://tiktok.com/@minhduy",
      zaloUrl: "https://zalo.me/0123456333",
      facebookMessengerUrl: "https://m.me/minhduyqnam",
      description:
        "C√¥ng ty thi·∫øt b·ªã c√¥ng ngh·ªá h√†ng ƒë·∫ßu t·∫°i Vi·ªát Nam, chuy√™n cung c·∫•p thi·∫øt b·ªã c√¥ng ngh·ªá ch·∫•t l∆∞·ª£ng cao v·ªõi d·ªãch v·ª• b·∫£o h√†nh, b·∫£o tr√¨ chuy√™n nghi·ªáp. Tr·∫£i nghi·ªám c√¥ng ngh·ªá ti√™n ti·∫øn v·ªõi ƒë·ªôi ng≈© t∆∞ v·∫•n chuy√™n nghi·ªáp v√† gi√° c·∫£ c·∫°nh tranh.",
      keywords: "laptop, m√°y t√≠nh, thi·∫øt b·ªã c√¥ng ngh·ªá",
    };
    const existingSetting = await Setting.findOne();
    if (!existingSetting) {
      await Setting.create(settingsData);
    } else {
      Object.assign(existingSetting, settingsData);
      await existingSetting.save();
    }

    // Summary
    const [
      rolesCount,
      usersCount,
      serviceTypesCount,
      bookingsCount,
      productsCount,
      categoriesCount,
    ] = await Promise.all([
      Role.countDocuments(),
      User.countDocuments(),
      ServiceType.countDocuments(),
      Booking.countDocuments(),
      Product.countDocuments(),
      Category.countDocuments(),
    ]);
    console.log(
      `[MIGRATE] Seeded counts ‚Üí roles=${seededCounts.roles}, users=${
        seededCounts.users
      }, serviceTypes=${seededCounts.serviceTypes}, bookings=${
        seededCounts.bookings
      }, products=${seededCounts.products}, categories(group+sub)=${
        seededCounts.groupCategories + seededCounts.subCategories
      }, services=${seededCounts.services}, newsEvents=${
        seededCounts.newsEvents
      }, pricing=${seededCounts.pricing}, locations=${
        seededCounts.locations
      }, slides=${seededCounts.slides}`
    );
    console.log(
      `[MIGRATE] Summary (DB totals) ‚Üí roles=${rolesCount}, users=${usersCount}, serviceTypes=${serviceTypesCount}, bookings=${bookingsCount}, products=${productsCount}, categories=${categoriesCount}`
    );
    const bookingBreakdown = await Booking.aggregate([
      { $group: { _id: "$Status", count: { $sum: 1 } } },
      { $sort: { _id: 1 } },
    ]);
    console.log(
      `[MIGRATE] Bookings by status: ${JSON.stringify(bookingBreakdown)}`
    );
    // end
  } catch (error) {
    console.error("‚ùå L·ªói trong qu√° tr√¨nh migration:", error.message);
    console.error("üîç Chi ti·∫øt l·ªói:", error);

    if (error.message.includes("MONGO_URI")) {
    }
  } finally {
    if (mongoose.connection.readyState === 1) {
      await mongoose.disconnect();
    }
  }
}

// Run migration
migrate();
